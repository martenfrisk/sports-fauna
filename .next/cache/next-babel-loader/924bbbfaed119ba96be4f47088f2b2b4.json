{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\tquery FindCurrentUser($id: ID!) {\\n\\t\\t\\tfindUserByID(id: $id) {\\n\\t\\t\\t\\temail\\n\\t\\t\\t\\ttodos {\\n\\t\\t\\t\\t\\tdata {\\n\\t\\t\\t\\t\\t\\ttask\\n\\t\\t\\t\\t\\t\\tcompleted\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}    \\n\\t\\t}\\n\\t\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '@/components/layout';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\n\nvar Profile = function Profile(_ref) {\n  _s();\n\n  var token = _ref.token,\n      userId = _ref.userId;\n\n  var _useSWR = useSWR('/api/user'),\n      user = _useSWR.data;\n\n  var query = gql(_templateObject());\n\n  var fetcher = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return graphQLClient(token).request(query, user.id);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetcher(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var _useSWR2 = useSWR([query, user.id], fetcher),\n      data = _useSWR2.data,\n      error = _useSWR2.error;\n\n  console.log(data);\n  if (error) return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 3\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: JSON.stringify(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(Profile, \"OiMDQAsDhQJxESFPqZR3mMJg7D0=\", false, function () {\n  return [useSWR, useSWR];\n});\n\n_c = Profile;\nexport var __N_SSP = true;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["Layout","graphQLClient","gql","useSWR","Profile","token","userId","user","data","query","fetcher","request","id","error","console","log","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AAEA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAkD;AAAA;;AAAA,MAA/CC,KAA+C,QAA/CA,KAA+C;AAAA,MAAxCC,MAAwC,QAAxCA,MAAwC;;AAAA,gBAC1CH,MAAM,CAAC,WAAD,CADoC;AAAA,MACnDI,IADmD,WACzDC,IADyD;;AAGjE,MAAMC,KAAK,GAAGP,GAAH,mBAAX;;AAcA,MAAMQ,OAAO;AAAA,yEAAG,iBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuBR,aAAa,CAACI,KAAD,CAAb,CAAqBM,OAArB,CAA6BF,KAA7B,EAAoCF,IAAI,CAACK,EAAzC,CAAvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPF,OAAO;AAAA;AAAA;AAAA,KAAb;;AAjBiE,iBAmBzCP,MAAM,CAAC,CAACM,KAAD,EAAQF,IAAI,CAACK,EAAb,CAAD,EAAmBF,OAAnB,CAnBmC;AAAA,MAmBzDF,IAnByD,YAmBzDA,IAnByD;AAAA,MAmBnDK,KAnBmD,YAmBnDA,KAnBmD;;AAoBjEC,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AAEA,MAAIK,KAAJ,EAAW,oBACV,QAAC,MAAD;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,WADU;AAKX,sBACC,QAAC,MAAD;AAAA,cACEG,IAAI,CAACC,SAAL,CAAeT,IAAf;AADF;AAAA;AAAA;AAAA;AAAA,WADD;AAKA,CAhCD;;GAAMJ,O;UACkBD,M,EAkBCA,M;;;KAnBnBC,O;;AAuCN,eAAeA,OAAf","sourcesContent":["import Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { gql } from 'graphql-request'\nimport user from 'pages/api/user'\nimport useSWR from 'swr'\n\nconst Profile = ({ token, userId }: {token: any, userId: any}) => {\n\tconst { data: user } = useSWR('/api/user')\n\n\tconst query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`\n\t\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, user.id)\n\t\n\tconst { data, error } = useSWR([query, user.id], fetcher)\n\tconsole.log(data)\n\n\tif (error) return (\n\t\t<Layout>\n\t\t\t<div>Error...</div>\n\t\t</Layout>\n\t)\n\treturn (\n\t\t<Layout>\n\t\t\t{JSON.stringify(data)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\treturn { props: { token: token || null } }\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}