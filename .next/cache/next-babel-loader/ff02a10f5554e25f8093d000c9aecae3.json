{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/todo/[id].tsx\";\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport EditForm from '@/components/edit-form';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport { getAuthCookie } from '@/utils/auth-cookies';\n\nconst Todo = ({\n  token\n}) => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n\n  const fetcher = async query => await graphQLClient(token).request(query, {\n    id\n  });\n\n  const query = gql`\n    query FindATodoByID($id: ID!) {\n      findTodoByID(id: $id) {\n        task\n        completed\n      }\n    }\n  `;\n  const {\n    data,\n    error\n  } = useSWR([query, id], fetcher);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 20\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), data ? /*#__PURE__*/_jsxDEV(EditForm, {\n      defaultValues: data.findTodoByID,\n      id: id,\n      token: token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n};\n\nexport const getServerSideProps = ctx => {\n  const token = getAuthCookie(ctx.req);\n  return {\n    props: {\n      token: token || null\n    }\n  };\n};\nexport default Todo;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/todo/[id].tsx"],"names":["useRouter","useSWR","gql","Layout","EditForm","graphQLClient","getAuthCookie","Todo","token","router","id","query","fetcher","request","data","error","findTodoByID","getServerSideProps","ctx","req","props"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA+B;AAC3C,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;;AAEA,QAAMC,OAAO,GAAG,MAAOD,KAAP,IAAiB,MAAMN,aAAa,CAACG,KAAD,CAAb,CAAqBK,OAArB,CAA6BF,KAA7B,EAAoC;AAAED,IAAAA;AAAF,GAApC,CAAvC;;AAEA,QAAMC,KAAK,GAAGT,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAPC;AASA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBd,MAAM,CAAC,CAACU,KAAD,EAAQD,EAAR,CAAD,EAAcE,OAAd,CAA9B;AAEA,MAAIG,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACC,QAAC,MAAD;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAGED,IAAI,gBACJ,QAAC,QAAD;AAAU,MAAA,aAAa,EAAEA,IAAI,CAACE,YAA9B;AAA4C,MAAA,EAAE,EAAEN,EAAhD;AAAoD,MAAA,KAAK,EAAEF;AAA3D;AAAA;AAAA;AAAA;AAAA,YADI,gBAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CA9BD;;AAiCA,OAAO,MAAMS,kBAAkB,GAAIC,GAAD,IAAc;AAC/C,QAAMV,KAAK,GAAGF,aAAa,CAACY,GAAG,CAACC,GAAL,CAA3B;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAEZ,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAlB;AAAT,GAAP;AACA,CAHM;AAMP,eAAeD,IAAf","sourcesContent":["import { useRouter } from 'next/router'\nimport useSWR from 'swr'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport EditForm from '@/components/edit-form'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\n\nconst Todo = ({ token }: { token: any }) => {\n\tconst router = useRouter()\n\tconst { id } = router.query\n\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, { id })\n\n\tconst query = gql`\n    query FindATodoByID($id: ID!) {\n      findTodoByID(id: $id) {\n        task\n        completed\n      }\n    }\n  `\n\n\tconst { data, error } = useSWR([query, id], fetcher)\n\n\tif (error) return <div>Failed to load</div>\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1>Edit todo</h1>\n\n\t\t\t{data ? (\n\t\t\t\t<EditForm defaultValues={data.findTodoByID} id={id} token={token} />\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\n\nexport const getServerSideProps = (ctx: any) => {\n\tconst token = getAuthCookie(ctx.req)\n\treturn { props: { token: token || null } }\n}\n\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}