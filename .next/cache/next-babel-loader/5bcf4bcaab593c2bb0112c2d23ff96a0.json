{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/league/[id].tsx\";\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport { getAuthCookie } from '@/utils/auth-cookies';\n\nconst Todo = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this), data ? data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(item)\n    }, item.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 6\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    id\n  } = ctx.params;\n  const token = getAuthCookie(ctx.req);\n  const query = gql`\n\t\tquery FindLeague($id: ID!) {\n\t\t\tfindLeagueByID(id: $id) {\n\t\t\t\tname\n\t\t\t\tmembers {\n\t\t\t\t\tdata {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tusername\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n  const res = await graphQLClient(token).request(query, {\n    id\n  });\n  console.log(res);\n  const data = await res;\n  return {\n    props: {\n      data: data === null || data === void 0 ? void 0 : data.findLeagueByID\n    }\n  };\n}\nexport default Todo;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/league/[id].tsx"],"names":["gql","Layout","graphQLClient","getAuthCookie","Todo","data","map","item","JSON","stringify","name","getServerSideProps","ctx","id","params","token","req","query","res","request","console","log","props","findLeagueByID"],"mappings":";;AACA,SAASA,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,aAAT,QAA8B,sBAA9B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAEzC,sBACC,QAAC,MAAD;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAGEA,IAAI,GACJA,IAAI,CAACC,GAAL,CAAUC,IAAD,iBACR;AAAA,gBACEC,IAAI,CAACC,SAAL,CAAeF,IAAf;AADF,OAAUA,IAAI,CAACG,IAAf;AAAA;AAAA;AAAA;AAAA,YADD,CADI,gBAOJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAeA,CAjBD;;AAoBA,OAAO,eAAeC,kBAAf,CAAkCC,GAAlC,EAA4C;AAClD,QAAM;AAAEC,IAAAA;AAAF,MAASD,GAAG,CAACE,MAAnB;AACA,QAAMC,KAAK,GAAGZ,aAAa,CAACS,GAAG,CAACI,GAAL,CAA3B;AACA,QAAMC,KAAK,GAAGjB,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAZC;AAaA,QAAMkB,GAAG,GAAG,MAAMhB,aAAa,CAACa,KAAD,CAAb,CAAqBI,OAArB,CAA6BF,KAA7B,EAAoC;AAACJ,IAAAA;AAAD,GAApC,CAAlB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,QAAMb,IAAI,GAAG,MAAMa,GAAnB;AAEA,SAAO;AAAEI,IAAAA,KAAK,EAAE;AACfjB,MAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEkB;AADG;AAAT,GAAP;AAGA;AAGD,eAAenB,IAAf","sourcesContent":["import { useRouter } from 'next/router'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\n\nconst Todo = ({ data }: { data: any }) => {\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1>Edit todo</h1>\n\n\t\t\t{data ? (\n\t\t\t\tdata.map((item) => (\n\t\t\t\t\t<div key={item.name}>\n\t\t\t\t\t\t{JSON.stringify(item)}\n\t\t\t\t\t</div>\n\t\t\t\t))\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\n\nexport async function getServerSideProps(ctx: any) {\n\tconst { id } = ctx.params\n\tconst token = getAuthCookie(ctx.req)\n\tconst query = gql`\n\t\tquery FindLeague($id: ID!) {\n\t\t\tfindLeagueByID(id: $id) {\n\t\t\t\tname\n\t\t\t\tmembers {\n\t\t\t\t\tdata {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tusername\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}`\n\tconst res = await graphQLClient(token).request(query, {id})\n\tconsole.log(res)\n\tconst data = await res\n\n\treturn { props: { \n\t\tdata: data?.findLeagueByID\n\t} }\n}\n\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}