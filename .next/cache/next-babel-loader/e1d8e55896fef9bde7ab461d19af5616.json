{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/todo/[id].js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query FindATodoByID($id: ID!) {\\n      findTodoByID(id: $id) {\\n        task\\n        completed\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport EditForm from '@/components/edit-form';\nimport { graphQLClient } from '@utils/graphql-client';\n\nvar Todo = function Todo() {\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var fetcher = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return graphQLClient.request(query);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetcher(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var query = gql(_templateObject());\n\n  var _useSWR = useSWR([query, id], fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), data ? /*#__PURE__*/_jsxDEV(EditForm, {\n      defaultValues: data.findTodoByID,\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Todo, \"F2OQGCTB9lgwThKfzWI7sczFgbA=\", false, function () {\n  return [useRouter, useSWR];\n});\n\n_c = Todo;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/todo/[id].js"],"names":["useRouter","useSWR","gql","Layout","EditForm","graphQLClient","Todo","router","id","query","fetcher","request","data","error","findTodoByID"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AADiB,MAETQ,EAFS,GAEFD,MAAM,CAACE,KAFL,CAETD,EAFS;;AAIjB,MAAME,OAAO;AAAA,wEAAG,iBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuBJ,aAAa,CAACM,OAAd,CAAsBF,KAAtB,CAAvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPC,OAAO;AAAA;AAAA;AAAA,KAAb;;AAEA,MAAMD,KAAK,GAAGP,GAAH,mBAAX;;AANiB,gBAeOD,MAAM,CAAC,CAACQ,KAAD,EAAQD,EAAR,CAAD,EAAcE,OAAd,CAfb;AAAA,MAeTE,IAfS,WAeTA,IAfS;AAAA,MAeHC,KAfG,WAeHA,KAfG;;AAiBjB,MAAIA,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEX,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAGGD,IAAI,gBACH,QAAC,QAAD;AAAU,MAAA,aAAa,EAAEA,IAAI,CAACE,YAA9B;AAA4C,MAAA,EAAE,EAAEN;AAAhD;AAAA;AAAA;AAAA;AAAA,aADG,gBAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAWD,CA9BD;;GAAMF,I;UACWN,S,EAcSC,M;;;KAfpBK,I;AAgCN,eAAeA,IAAf","sourcesContent":["import { useRouter } from 'next/router'\nimport useSWR from 'swr'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport EditForm from '@/components/edit-form'\nimport { graphQLClient } from '@utils/graphql-client'\n\nconst Todo = () => {\n  const router = useRouter()\n  const { id } = router.query\n\n  const fetcher = async (query) => await graphQLClient.request(query)\n\n  const query = gql`\n    query FindATodoByID($id: ID!) {\n      findTodoByID(id: $id) {\n        task\n        completed\n      }\n    }\n  `\n\n  const { data, error } = useSWR([query, id], fetcher)\n\n  if (error) return <div>Failed to load</div>\n\n  return (\n    <Layout>\n      <h1>Edit todo</h1>\n\n      {data ? (\n        <EditForm defaultValues={data.findTodoByID} id={id} />\n      ): (\n        <div>Loading...</div>\n      )}\n    </Layout>\n  )\n}\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}