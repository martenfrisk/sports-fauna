{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/new.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation CreateATodo($task: String!) {\\n        createTodo(data: { task: $task, completed: false }) {\\n          task\\n          completed\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState } from 'react';\nimport Router from 'next/router';\nimport { gql } from 'graphql-request';\nimport { useForm } from 'react-hook-form';\nimport Layout from '../components/layout';\nimport { graphQLClient } from '../utils/graphql-client';\n\nvar New = function New() {\n  _s();\n\n  var _useState = useState(''),\n      errorMessage = _useState[0],\n      setErrorMessage = _useState[1];\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  var onSubmit = handleSubmit( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var task, query;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              task = _ref.task;\n              if (errorMessage) setErrorMessage('');\n              query = gql(_templateObject());\n              _context.prev = 3;\n              _context.next = 6;\n              return graphQLClient.request(query, {\n                task: task\n              });\n\n            case 6:\n              Router.push('/');\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n              setErrorMessage(_context.t0.message);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 9]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-3xl\",\n      children: \"Create new todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 7\n          }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"test\",\n            name: \"task\",\n            placeholder: \"e.g. do something\",\n            ref: register({\n              required: 'Task is required'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 7\n          }, _this), errors.task && /*#__PURE__*/_jsxDEV(\"span\", {\n            role: \"alert\",\n            children: errors.task.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 8\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 7\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 6\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, _this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        role: \"alert\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(New, \"QZ0RwANFYWiMgePVx2j1c5w862U=\", false, function () {\n  return [useForm];\n});\n\n_c = New;\nexport default New;\n\nvar _c;\n\n$RefreshReg$(_c, \"New\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/new.tsx"],"names":["useState","Router","gql","useForm","Layout","graphQLClient","New","errorMessage","setErrorMessage","handleSubmit","register","errors","onSubmit","task","query","request","push","console","error","message","required"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA;;AAAA,kBACuBN,QAAQ,CAAC,EAAD,CAD/B;AAAA,MACVO,YADU;AAAA,MACIC,eADJ;;AAAA,iBAE0BL,OAAO,EAFjC;AAAA,MAETM,YAFS,YAETA,YAFS;AAAA,MAEKC,QAFL,YAEKA,QAFL;AAAA,MAEeC,MAFf,YAEeA,MAFf;;AAIjB,MAAMC,QAAQ,GAAGH,YAAY;AAAA,yEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASI,cAAAA,IAAT,QAASA,IAAT;AAC7B,kBAAIN,YAAJ,EAAkBC,eAAe,CAAC,EAAD,CAAf;AAEZM,cAAAA,KAHuB,GAGfZ,GAHe;AAAA;AAAA;AAAA,qBAatBG,aAAa,CAACU,OAAd,CAAsBD,KAAtB,EAA6B;AAAED,gBAAAA,IAAI,EAAJA;AAAF,eAA7B,CAbsB;;AAAA;AAc5BZ,cAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AAd4B;AAAA;;AAAA;AAAA;AAAA;AAgB5BC,cAAAA,OAAO,CAACC,KAAR;AACAV,cAAAA,eAAe,CAAC,YAAMW,OAAP,CAAf;;AAjB4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MAA7B;AAqBA,sBACC,QAAC,MAAD;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,eAEC;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BAEC;AAAM,QAAA,QAAQ,EAAEP,QAAhB;AAAA,gCACC;AAAA,kCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADD,eAEC;AACC,YAAA,IAAI,EAAC,MADN;AAEC,YAAA,IAAI,EAAC,MAFN;AAGC,YAAA,WAAW,EAAC,mBAHb;AAIC,YAAA,GAAG,EAAEF,QAAQ,CAAC;AAAEU,cAAAA,QAAQ,EAAE;AAAZ,aAAD;AAJd;AAAA;AAAA;AAAA;AAAA,mBAFD,EAQET,MAAM,CAACE,IAAP,iBACA;AAAM,YAAA,IAAI,EAAC,OAAX;AAAA,sBACEF,MAAM,CAACE,IAAP,CAAYM;AADd;AAAA;AAAA;AAAA;AAAA,mBATF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADD,eAgBC;AAAA,iCACC;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,iBAhBD;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD,EAuBEZ,YAAY,iBACZ;AAAG,QAAA,IAAI,EAAC,OAAR;AAAA,kBACEA;AADF;AAAA;AAAA;AAAA;AAAA,eAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,aAFD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAkCA,CA3DD;;GAAMD,G;UAEsCH,O;;;KAFtCG,G;AA6DN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react'\nimport Router from 'next/router'\nimport { gql } from 'graphql-request'\nimport { useForm } from 'react-hook-form'\nimport Layout from '../components/layout'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst New = () => {\n\tconst [errorMessage, setErrorMessage] = useState('')\n\tconst { handleSubmit, register, errors } = useForm()\n\n\tconst onSubmit = handleSubmit(async ({ task }) => {\n\t\tif (errorMessage) setErrorMessage('')\n\n\t\tconst query = gql`\n      mutation CreateATodo($task: String!) {\n        createTodo(data: { task: $task, completed: false }) {\n          task\n          completed\n        }\n      }\n    `\n\n\t\ttry {\n\t\t\tawait graphQLClient.request(query, { task })\n\t\t\tRouter.push('/')\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tsetErrorMessage(error.message)\n\t\t}\n\t})\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1 className=\"text-3xl\">Create new todo</h1>\n\t\t\t<div className=\"flex flex-col w-full\">\n\n\t\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>Task</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"test\"\n\t\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\t\tplaceholder=\"e.g. do something\"\n\t\t\t\t\t\t\tref={register({ required: 'Task is required' })}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{errors.task && (\n\t\t\t\t\t\t\t<span role=\"alert\">\n\t\t\t\t\t\t\t\t{errors.task.message}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button type=\"submit\">Create</button>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\n\t\t\t\t{errorMessage && (\n\t\t\t\t\t<p role=\"alert\">\n\t\t\t\t\t\t{errorMessage}\n\t\t\t\t\t</p>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</Layout>\n\t)\n}\n\nexport default New\n"]},"metadata":{},"sourceType":"module"}