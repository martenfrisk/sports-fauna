{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/todo/[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query FindATodoByID($id: ID!) {\\n      findTodoByID(id: $id) {\\n        task\\n        completed\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport EditForm from '@/components/edit-form';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nvar Todo = function Todo(_ref) {\n  _s();\n\n  var token = _ref.token;\n  var router = useRouter();\n  var id = router.query.id;\n\n  var fetcher = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return graphQLClient(token).request(query, {\n                id: id\n              });\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetcher(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var query = gql(_templateObject());\n\n  var _useSWR = useSWR([query, id], fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Failed to load\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 20\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, _this), data ? /*#__PURE__*/_jsxDEV(EditForm, {\n      defaultValues: data.findTodoByID,\n      id: id,\n      token: token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(Todo, \"F2OQGCTB9lgwThKfzWI7sczFgbA=\", false, function () {\n  return [useRouter, useSWR];\n});\n\n_c = Todo;\nexport var __N_SSP = true;\nexport default Todo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/todo/[id].tsx"],"names":["useRouter","useSWR","gql","Layout","EditForm","graphQLClient","Todo","token","router","id","query","fetcher","request","data","error","findTodoByID"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAA+B;AAAA;;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAC3C,MAAMC,MAAM,GAAGR,SAAS,EAAxB;AAD2C,MAEnCS,EAFmC,GAE5BD,MAAM,CAACE,KAFqB,CAEnCD,EAFmC;;AAI3C,MAAME,OAAO;AAAA,yEAAG,iBAAOD,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuBL,aAAa,CAACE,KAAD,CAAb,CAAqBK,OAArB,CAA6BF,KAA7B,EAAoC;AAAED,gBAAAA,EAAE,EAAFA;AAAF,eAApC,CAAvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPE,OAAO;AAAA;AAAA;AAAA,KAAb;;AAEA,MAAMD,KAAK,GAAGR,GAAH,mBAAX;;AAN2C,gBAenBD,MAAM,CAAC,CAACS,KAAD,EAAQD,EAAR,CAAD,EAAcE,OAAd,CAfa;AAAA,MAenCE,IAfmC,WAenCA,IAfmC;AAAA,MAe7BC,KAf6B,WAe7BA,KAf6B;;AAiB3C,MAAIA,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AAEX,sBACC,QAAC,MAAD;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADD,EAGED,IAAI,gBACJ,QAAC,QAAD;AAAU,MAAA,aAAa,EAAEA,IAAI,CAACE,YAA9B;AAA4C,MAAA,EAAE,EAAEN,EAAhD;AAAoD,MAAA,KAAK,EAAEF;AAA3D;AAAA;AAAA;AAAA;AAAA,aADI,gBAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAWA,CA9BD;;GAAMD,I;UACUN,S,EAcSC,M;;;KAfnBK,I;;AAuCN,eAAeA,IAAf","sourcesContent":["import { useRouter } from 'next/router'\nimport useSWR from 'swr'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport EditForm from '@/components/edit-form'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\n\nconst Todo = ({ token }: { token: any }) => {\n\tconst router = useRouter()\n\tconst { id } = router.query\n\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, { id })\n\n\tconst query = gql`\n    query FindATodoByID($id: ID!) {\n      findTodoByID(id: $id) {\n        task\n        completed\n      }\n    }\n  `\n\n\tconst { data, error } = useSWR([query, id], fetcher)\n\n\tif (error) return <div>Failed to load</div>\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1>Edit todo</h1>\n\n\t\t\t{data ? (\n\t\t\t\t<EditForm defaultValues={data.findTodoByID} id={id} token={token} />\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\n\nexport const getServerSideProps = (ctx: any) => {\n\tconst token = getAuthCookie(ctx.req)\n\treturn { props: { token: token || null } }\n}\n\n\nexport default Todo"]},"metadata":{},"sourceType":"module"}