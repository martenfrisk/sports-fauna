{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\tquery FindCurrentUser($id: ID!) {\\n\\t\\t\\tfindUserByID(id: $id) {\\n\\t\\t\\t\\temail\\n\\t\\t\\t\\ttodos {\\n\\t\\t\\t\\t\\tdata {\\n\\t\\t\\t\\t\\t\\ttask\\n\\t\\t\\t\\t\\t\\tcompleted\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}    \\n\\t\\t}\\n\\t\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useEffect, useState } from 'react';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\nimport Layout from '@/components/layout';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nvar Profile = function Profile(_ref) {\n  _s();\n\n  var token = _ref.token;\n\n  var _useSWR = useSWR('/api/user'),\n      data = _useSWR.data;\n\n  var user = data.user;\n\n  var _useState = useState([]),\n      userTodos = _useState[0],\n      setUserTodos = _useState[1];\n\n  var query = gql(_templateObject());\n  var variables = {\n    id: user && user.id\n  };\n\n  var fetcher = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return graphQLClient(token).request(query, variables);\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetcher(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var info = useSWR([query, variables], fetcher);\n  console.log(info); // const { data, error } = useSWR([query, variables], fetcher)\n\n  console.log(data);\n  useEffect(function () {\n    setUserTodos(data);\n  }, [data]);\n  if (error) return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, _this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(userTodos)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(Profile, \"7oU5IU66gVzg4nxGe4kYei4b5IE=\", false, function () {\n  return [useSWR, useSWR];\n});\n\n_c = Profile;\nexport var __N_SSP = true;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["useEffect","useState","gql","useSWR","Layout","graphQLClient","Profile","token","data","user","userTodos","setUserTodos","query","variables","id","fetcher","request","info","console","log","error","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAA6B;AAAA;;AAAA,MAA1BC,KAA0B,QAA1BA,KAA0B;;AAAA,gBAC3BJ,MAAM,CAAC,WAAD,CADqB;AAAA,MACpCK,IADoC,WACpCA,IADoC;;AAAA,MAEpCC,IAFoC,GAE3BD,IAF2B,CAEpCC,IAFoC;;AAAA,kBAGVR,QAAQ,CAAC,EAAD,CAHE;AAAA,MAGrCS,SAHqC;AAAA,MAG1BC,YAH0B;;AAI5C,MAAMC,KAAK,GAAGV,GAAH,mBAAX;AAcA,MAAMW,SAAS,GAAG;AACjBC,IAAAA,EAAE,EAAEL,IAAI,IAAIA,IAAI,CAACK;AADA,GAAlB;;AAIA,MAAMC,OAAO;AAAA,yEAAG,iBAAOH,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAuBP,aAAa,CAACE,KAAD,CAAb,CAAqBS,OAArB,CAA6BJ,KAA7B,EAAoCC,SAApC,CAAvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPE,OAAO;AAAA;AAAA;AAAA,KAAb;;AACA,MAAME,IAAI,GAAGd,MAAM,CAAC,CAACS,KAAD,EAAQC,SAAR,CAAD,EAAqBE,OAArB,CAAnB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAxB4C,CAyB5C;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACAR,EAAAA,SAAS,CAAC,YAAM;AACfW,IAAAA,YAAY,CAACH,IAAD,CAAZ;AACA,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,MAAIY,KAAJ,EAAW,oBACV,QAAC,MAAD;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,WADU;AAKX,sBACC,QAAC,MAAD;AAAA,cACGZ,IAAI,gBACL;AAAA,gBACEa,IAAI,CAACC,SAAL,CAAeZ,SAAf;AADF;AAAA;AAAA;AAAA;AAAA,aADK,gBAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,WADD;AAWA,CA/CD;;GAAMJ,O;UACYH,M,EAsBJA,M;;;KAvBRG,O;;AAsDN,eAAeA,OAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { gql } from 'graphql-request'\nimport useSWR from 'swr'\nimport Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\n\nconst Profile = ({ token }: {token: any}) => {\n\tconst { data } = useSWR('/api/user')\n\tconst { user } = data\n\tconst [userTodos, setUserTodos] = useState([])\n\tconst query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`\n\n\tconst variables = {\n\t\tid: user && user.id\n\t}\n\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, variables)\n\tconst info = useSWR([query, variables], fetcher)\n\tconsole.log(info)\n\t// const { data, error } = useSWR([query, variables], fetcher)\n\tconsole.log(data)\n\tuseEffect(() => {\n\t\tsetUserTodos(data)\n\t}, [data])\n\n\tif (error) return (\n\t\t<Layout>\n\t\t\t<div>Error...</div>\n\t\t</Layout>\n\t)\n\treturn (\n\t\t<Layout>\n\t\t\t{ data ? (\n\t\t\t\t<div>\n\t\t\t\t\t{JSON.stringify(userTodos)}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\treturn { props: { token: token || null } }\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}