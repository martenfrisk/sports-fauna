{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/index.js\";\nimport useSWR from 'swr';\nimport Link from 'next/link';\nimport { gql } from 'graphql-request';\nimport Layout from '../components/layout';\nimport styles from '../styles/Home.module.css';\nimport { graphQLClient } from '../utils/graphql-client';\n\nconst fetcher = async query => await graphQLClient.request(query);\n\nexport default function Home() {\n  const {\n    data,\n    error,\n    mutate\n  } = useSWR(gql`\n      {\n        allTodos {\n          data {\n            _id\n            task\n            completed\n          }\n        }    \n      }\n    `, fetcher);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }, this);\n\n  const toggleTodo = async (id, completed) => {\n    const query = gql`\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\n          _id\n          completed\n        }\n      }\n    `;\n    const variables = {\n      id,\n      completed: !completed\n    };\n\n    try {\n      await graphQLClient.request(query, variables);\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const deleteATodo = async id => {\n    const query = gql`\n      mutation DeleteATodo($id: ID!) {\n        deleteTodo(id: $id) {\n          _id\n        }\n      }\n    `;\n\n    try {\n      await graphQLClient.request(query, {\n        id\n      });\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Next Fauna GraphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/new\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Create new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.allTodos.data.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.todo,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => toggleTodo(todo._id, todo.completed),\n          style: todo.completed ? {\n            textDecorationLine: 'line-through'\n          } : {\n            textDecorationLine: 'none'\n          },\n          children: todo.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/todo/[id]\",\n          as: `/todo/${todo._id}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => deleteATodo(todo._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }, this)]\n      }, todo._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/index.js"],"names":["useSWR","Link","gql","Layout","styles","graphQLClient","fetcher","query","request","Home","data","error","mutate","toggleTodo","id","completed","variables","console","deleteATodo","allTodos","map","todo","_id","textDecorationLine","task"],"mappings":"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","sourcesContent":["import useSWR from 'swr'\nimport Link from 'next/link'\nimport { gql } from 'graphql-request'\nimport Layout from '../components/layout'\nimport styles from '../styles/Home.module.css'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst fetcher = async (query) => await graphQLClient.request(query)\n\nexport default function Home() {\n  const { data, error, mutate } = useSWR(\n    gql`\n      {\n        allTodos {\n          data {\n            _id\n            task\n            completed\n          }\n        }    \n      }\n    `, fetcher\n  )\n\n  if (error) return <div>Error...</div>\n\n  const toggleTodo = async (id, completed) => {\n    const query = gql`\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\n          _id\n          completed\n        }\n      }\n    `\n\n    const variables = {\n      id,\n      completed: !completed,\n    }\n\n    try {\n      await graphQLClient.request(query, variables)\n      mutate()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const deleteATodo = async (id) => {\n    const query = gql`\n      mutation DeleteATodo($id: ID!) {\n        deleteTodo(id: $id) {\n          _id\n        }\n      }\n    `\n\n    try {\n      await graphQLClient.request(query, { id })\n      mutate()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <Layout>\n      <h1>Next Fauna GraphQL</h1>\n      <Link href=\"/new\">\n        <a>Create new todo</a>\n      </Link>\n     \n      {data ? (\n        <ul>\n          {data.allTodos.data.map((todo) => (\n            <li key={todo._id} className={styles.todo}>\n              <span\n                onClick={() => toggleTodo(todo._id, todo.completed)}\n                style={\n                  todo.completed\n                    ? { textDecorationLine: 'line-through' }\n                    : { textDecorationLine: 'none' }\n                }\n              >\n                {todo.task}\n              </span>\n              <Link href=\"/todo/[id]\" as={`/todo/${todo._id}`}>\n                <a>Edit</a>\n              </Link>\n              <span onClick={() => deleteATodo(todo._id)}>\n                Delete\n              </span>\n            </li>\n          ))}\n        </ul>\n      ): (\n        <div>Loading...</div>\n      )}\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}