{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\";\nimport Layout from '@/components/layout';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\n\nconst Profile = ({\n  token,\n  user\n}) => {\n  const {\n    id\n  } = user;\n  const query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`;\n\n  const fetcher = async query => await graphQLClient(token).request(query, {\n    id\n  });\n\n  const {\n    data,\n    error\n  } = useSWR([query, id], fetcher);\n  console.log(data);\n  if (error) return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: JSON.stringify(data)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = await getAuthCookie(ctx.req);\n  const user = await useSWR('/api/user');\n  return {\n    props: {\n      token: token || null,\n      user\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["Layout","getAuthCookie","graphQLClient","gql","useSWR","Profile","token","user","id","query","fetcher","request","data","error","console","log","JSON","stringify","getServerSideProps","ctx","req","props"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA8C;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAASD,IAAf;AAEA,QAAME,KAAK,GAAGN,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAZC;;AAcA,QAAMO,OAAO,GAAG,MAAOD,KAAP,IAAiB,MAAMP,aAAa,CAACI,KAAD,CAAb,CAAqBK,OAArB,CAA6BF,KAA7B,EAAoC;AAAED,IAAAA;AAAF,GAApC,CAAvC;;AAEA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBT,MAAM,CAAC,CAACK,KAAD,EAAQD,EAAR,CAAD,EAAcE,OAAd,CAA9B;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,MAAIC,KAAJ,EAAW,oBACV,QAAC,MAAD;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADU;AAKX,sBACC,QAAC,MAAD;AAAA,cACEG,IAAI,CAACC,SAAL,CAAeL,IAAf;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAKA,CAhCD;;AAkCA,OAAO,eAAeM,kBAAf,CAAkCC,GAAlC,EAA4C;AAClD,QAAMb,KAAK,GAAG,MAAML,aAAa,CAACkB,GAAG,CAACC,GAAL,CAAjC;AACA,QAAMb,IAAI,GAAG,MAAMH,MAAM,CAAC,WAAD,CAAzB;AACA,SAAO;AAAEiB,IAAAA,KAAK,EAAE;AAAEf,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAAlB;AAAwBC,MAAAA;AAAxB;AAAT,GAAP;AACA;AAED,eAAeF,OAAf","sourcesContent":["import Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { gql } from 'graphql-request'\nimport useSWR from 'swr'\n\nconst Profile = ({ token, user }: {token: any, user: any}) => {\n\tconst { id } = user\n\n\tconst query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`\n\t\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, { id })\n\t\n\tconst { data, error } = useSWR([query, id], fetcher)\n\tconsole.log(data)\n\n\tif (error) return (\n\t\t<Layout>\n\t\t\t<div>Error...</div>\n\t\t</Layout>\n\t)\n\treturn (\n\t\t<Layout>\n\t\t\t{JSON.stringify(data)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\tconst user = await useSWR('/api/user')\n\treturn { props: { token: token || null, user } }\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}