{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/components/edit-user.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react'; // import Router from 'next/router'\n\nimport { gql } from 'graphql-request';\nimport { useForm } from 'react-hook-form';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nconst EditUser = ({\n  defaultValues,\n  id,\n  token\n}) => {\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: updateMessage,\n    1: setUpdateMessage\n  } = useState(''); // const fetcher = async (query) => await graphQLClient(token).request(query)\n  // const { data, error } = useSWR('/api/user', fetcher)\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    errors\n  } = useForm({\n    defaultValues: _objectSpread({}, defaultValues)\n  });\n  const onSubmit = handleSubmit(async ({\n    email,\n    favTeam\n  }) => {\n    if (errorMessage) setErrorMessage('');\n    const query = gql`\n      mutation UpdateAUser($id: ID!, $email: String!, $favTeam: String) {\n        updateUser(id: $id, data: { email: $email, favTeam: $favTeam}) {\n          email\n          favTeam\n        }\n      }\n    `;\n    const variables = {\n      id,\n      email,\n      favTeam\n    };\n    console.log(query);\n\n    try {\n      await graphQLClient(token).request(query, variables);\n      setUpdateMessage(() => 'Profile updated');\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error.message);\n    }\n  });\n  useEffect(() => {\n    reset(defaultValues);\n  }, [reset, defaultValues]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      className: \"w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          className: \"text-right\",\n          ref: register({\n            required: 'Email is required'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 6\n        }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.email.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-between w-full\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Favorite Team\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"favTeam\",\n          className: \"text-right\",\n          ref: register\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, this), errors.favTeam && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.favTeam.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 4\n    }, this), updateMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      role: \"alert\",\n      children: updateMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      role: \"alert\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\nexport default EditUser;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/components/edit-user.tsx"],"names":["useState","useEffect","gql","useForm","graphQLClient","EditUser","defaultValues","id","token","errorMessage","setErrorMessage","updateMessage","setUpdateMessage","handleSubmit","register","reset","errors","onSubmit","email","favTeam","query","variables","console","log","request","error","message","required"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CACA;;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,EAAjB;AAAqBC,EAAAA;AAArB,CAAD,KAA+E;AAC/F,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAACW,aAAD;AAAA,OAAgBC;AAAhB,MAAoCZ,QAAQ,CAAC,EAAD,CAAlD,CAF+F,CAG/F;AACA;;AAEA,QAAM;AAAEa,IAAAA,YAAF;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA4Cb,OAAO,CAAC;AACzDG,IAAAA,aAAa,oBACTA,aADS;AAD4C,GAAD,CAAzD;AAMA,QAAMW,QAAQ,GAAGJ,YAAY,CAAC,OAAO;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP,KAA8B;AAC3D,QAAIV,YAAJ,EAAkBC,eAAe,CAAC,EAAD,CAAf;AAElB,UAAMU,KAAK,GAAGlB,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAPE;AASA,UAAMmB,SAAS,GAAG;AACjBd,MAAAA,EADiB;AAEjBW,MAAAA,KAFiB;AAGjBC,MAAAA;AAHiB,KAAlB;AAMAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAI;AACH,YAAMhB,aAAa,CAACI,KAAD,CAAb,CAAqBgB,OAArB,CAA6BJ,KAA7B,EAAoCC,SAApC,CAAN;AACAT,MAAAA,gBAAgB,CAAC,MAAM,iBAAP,CAAhB;AACA,KAHD,CAGE,OAAOa,KAAP,EAAc;AACfH,MAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACAf,MAAAA,eAAe,CAACe,KAAK,CAACC,OAAP,CAAf;AACA;AACD,GA1B4B,CAA7B;AA4BAzB,EAAAA,SAAS,CAAC,MAAM;AACfc,IAAAA,KAAK,CAACT,aAAD,CAAL;AACA,GAFQ,EAEN,CAACS,KAAD,EAAQT,aAAR,CAFM,CAAT;AAIA,sBACC;AAAA,4BACC;AAAM,MAAA,QAAQ,EAAEW,QAAhB;AAA0B,MAAA,SAAS,EAAC,QAApC;AAAA,8BACC;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,IAAI,EAAC,MADN;AAEC,UAAA,IAAI,EAAC,OAFN;AAGC,UAAA,SAAS,EAAC,YAHX;AAIC,UAAA,GAAG,EAAEH,QAAQ,CAAC;AAAEa,YAAAA,QAAQ,EAAE;AAAZ,WAAD;AAJd;AAAA;AAAA;AAAA;AAAA,gBAFD,EAQEX,MAAM,CAACE,KAAP,iBACA;AAAM,UAAA,IAAI,EAAC,OAAX;AAAA,oBACEF,MAAM,CAACE,KAAP,CAAaQ;AADf;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAgBC;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,gCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AACC,UAAA,IAAI,EAAC,MADN;AAEC,UAAA,IAAI,EAAC,SAFN;AAGC,UAAA,SAAS,EAAC,YAHX;AAIC,UAAA,GAAG,EAAEZ;AAJN;AAAA;AAAA;AAAA;AAAA,gBAFD,EAQEE,MAAM,CAACG,OAAP,iBACA;AAAM,UAAA,IAAI,EAAC,OAAX;AAAA,oBACEH,MAAM,CAACG,OAAP,CAAeO;AADjB;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBD,eA+BC;AAAA,+BACC;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,cA/BD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAqCEf,aAAa,iBACb;AAAG,MAAA,IAAI,EAAC,OAAR;AAAA,gBACEA;AADF;AAAA;AAAA;AAAA;AAAA,YAtCF,EA0CEF,YAAY,iBACZ;AAAG,MAAA,IAAI,EAAC,OAAR;AAAA,gBACEA;AADF;AAAA;AAAA;AAAA;AAAA,YA3CF;AAAA,kBADD;AAkDA,CA9FD;;AAgGA,eAAeJ,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\n// import Router from 'next/router'\nimport { gql } from 'graphql-request'\nimport { useForm } from 'react-hook-form'\nimport { graphQLClient } from '@/utils/graphql-client'\n\nconst EditUser = ({ defaultValues, id, token }: { defaultValues: any, id: any, token: any }) => {\n\tconst [errorMessage, setErrorMessage] = useState('')\n\tconst [updateMessage, setUpdateMessage] = useState('')\n\t// const fetcher = async (query) => await graphQLClient(token).request(query)\n\t// const { data, error } = useSWR('/api/user', fetcher)\n\n\tconst { handleSubmit, register, reset, errors } = useForm({\n\t\tdefaultValues: {\n\t\t\t...defaultValues,\n\t\t},\n\t})\n\n\tconst onSubmit = handleSubmit(async ({ email, favTeam }) => {\n\t\tif (errorMessage) setErrorMessage('')\n\n\t\tconst query = gql`\n      mutation UpdateAUser($id: ID!, $email: String!, $favTeam: String) {\n        updateUser(id: $id, data: { email: $email, favTeam: $favTeam}) {\n          email\n          favTeam\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tid,\n\t\t\temail,\n\t\t\tfavTeam,\n\t\t}\n\n\t\tconsole.log(query)\n\t\ttry {\n\t\t\tawait graphQLClient(token).request(query, variables)\n\t\t\tsetUpdateMessage(() => 'Profile updated')\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tsetErrorMessage(error.message)\n\t\t}\n\t}) \n\n\tuseEffect(() => {\n\t\treset(defaultValues)\n\t}, [reset, defaultValues])\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={onSubmit} className=\"w-full\">\n\t\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\t\t<label>Task</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\tclassName=\"text-right\" \n\t\t\t\t\t\tref={register({ required: 'Email is required' })}\n\t\t\t\t\t/>\n\t\t\t\t\t{errors.email && (\n\t\t\t\t\t\t<span role=\"alert\">\n\t\t\t\t\t\t\t{errors.email.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"flex justify-between w-full\">\n\t\t\t\t\t<label>Favorite Team</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"favTeam\" \n\t\t\t\t\t\tclassName=\"text-right\"\n\t\t\t\t\t\tref={register} \n\t\t\t\t\t/>\n\t\t\t\t\t{errors.favTeam && (\n\t\t\t\t\t\t<span role=\"alert\">\n\t\t\t\t\t\t\t{errors.favTeam.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<button type=\"submit\">Update</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\n\t\t\t{updateMessage && (\n\t\t\t\t<p role=\"alert\">\n\t\t\t\t\t{updateMessage}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t\t{errorMessage && (\n\t\t\t\t<p role=\"alert\">\n\t\t\t\t\t{errorMessage}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default EditUser"]},"metadata":{},"sourceType":"module"}