{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\";\nimport { useEffect, useState } from 'react';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\nimport Layout from '@/components/layout';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport user from './api/user';\n\nconst Profile = ({\n  token\n}) => {\n  const {\n    data\n  } = useSWR('/api/user'); // console.log(data)\n\n  const {\n    0: userTodos,\n    1: setUserTodos\n  } = useState([]);\n  const query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`;\n  const variables = {\n    id: data && data.id\n  };\n\n  const fetcher = async query => await graphQLClient(token).request(query, variables);\n\n  const info = useSWR([query, variables], fetcher); // console.log(info)\n  // const { data, error } = useSWR([query, variables], fetcher)\n\n  useEffect(() => {\n    setUserTodos(data);\n  }, [data]); // if (error) return (\n  // \t<Layout>\n  // \t\t<div>Error...</div>\n  // \t</Layout>\n  // )\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(userTodos)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = await getAuthCookie(ctx.req);\n  const data = user();\n  console.log({\n    data\n  });\n  return {\n    props: {\n      token: token || null,\n      data: JSON.stringify(data) || null\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["useEffect","useState","gql","useSWR","Layout","getAuthCookie","graphQLClient","user","Profile","token","data","userTodos","setUserTodos","query","variables","id","fetcher","request","info","JSON","stringify","getServerSideProps","ctx","req","console","log","props"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAWP,MAAM,CAAC,WAAD,CAAvB,CAD4C,CAE5C;;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMY,KAAK,GAAGX,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAZC;AAcA,QAAMY,SAAS,GAAG;AACjBC,IAAAA,EAAE,EAAEL,IAAI,IAAIA,IAAI,CAACK;AADA,GAAlB;;AAIA,QAAMC,OAAO,GAAG,MAAOH,KAAP,IAAiB,MAAMP,aAAa,CAACG,KAAD,CAAb,CAAqBQ,OAArB,CAA6BJ,KAA7B,EAAoCC,SAApC,CAAvC;;AACA,QAAMI,IAAI,GAAGf,MAAM,CAAC,CAACU,KAAD,EAAQC,SAAR,CAAD,EAAqBE,OAArB,CAAnB,CAvB4C,CAwB5C;AACA;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,YAAY,CAACF,IAAD,CAAZ;AACA,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT,CA1B4C,CA8B5C;AACA;AACA;AACA;AACA;;AACA,sBACC,QAAC,MAAD;AAAA,cACGA,IAAI,gBACL;AAAA,gBACES,IAAI,CAACC,SAAL,CAAeT,SAAf;AADF;AAAA;AAAA;AAAA;AAAA,YADK,gBAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CA9CD;;AAgDA,OAAO,eAAeU,kBAAf,CAAkCC,GAAlC,EAA4C;AAClD,QAAMb,KAAK,GAAG,MAAMJ,aAAa,CAACiB,GAAG,CAACC,GAAL,CAAjC;AACA,QAAMb,IAAI,GAAGH,IAAI,EAAjB;AACAiB,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACf,IAAAA;AAAD,GAAZ;AACA,SAAO;AACNgB,IAAAA,KAAK,EAAE;AACNjB,MAAAA,KAAK,EAAEA,KAAK,IAAI,IADV;AAENC,MAAAA,IAAI,EAAES,IAAI,CAACC,SAAL,CAAeV,IAAf,KAAwB;AAFxB;AADD,GAAP;AAMA;AAED,eAAeF,OAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { gql } from 'graphql-request'\nimport useSWR from 'swr'\nimport Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport user from './api/user'\n\nconst Profile = ({ token }: {token: any}) => {\n\tconst { data } = useSWR('/api/user')\n\t// console.log(data)\n\tconst [userTodos, setUserTodos] = useState([])\n\tconst query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`\n\n\tconst variables = {\n\t\tid: data && data.id\n\t}\n\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, variables)\n\tconst info = useSWR([query, variables], fetcher)\n\t// console.log(info)\n\t// const { data, error } = useSWR([query, variables], fetcher)\n\tuseEffect(() => {\n\t\tsetUserTodos(data)\n\t}, [data])\n\n\t// if (error) return (\n\t// \t<Layout>\n\t// \t\t<div>Error...</div>\n\t// \t</Layout>\n\t// )\n\treturn (\n\t\t<Layout>\n\t\t\t{ data ? (\n\t\t\t\t<div>\n\t\t\t\t\t{JSON.stringify(userTodos)}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\tconst data = user()\n\tconsole.log({data})\n\treturn { \n\t\tprops: { \n\t\t\ttoken: token || null,\n\t\t\tdata: JSON.stringify(data) || null,\n\t\t}\n\t}\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}