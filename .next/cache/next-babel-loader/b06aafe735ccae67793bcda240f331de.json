{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/new.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation CreateATodo($task: String!) {\\n        createTodo(data: { task: $task, completed: false }) {\\n          task\\n          completed\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState } from 'react';\nimport Router from 'next/router';\nimport { gql } from 'graphql-request';\nimport { useForm } from 'react-hook-form';\nimport Layout from '../components/layout';\nimport { graphQLClient } from '../utils/graphql-client';\n\nvar New = function New() {\n  _s();\n\n  var _useState = useState(''),\n      errorMessage = _useState[0],\n      setErrorMessage = _useState[1];\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors;\n\n  var onSubmit = handleSubmit( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var task, query;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              task = _ref.task;\n              if (errorMessage) setErrorMessage('');\n              query = gql(_templateObject());\n              _context.prev = 3;\n              _context.next = 6;\n              return graphQLClient.request(query, {\n                task: task\n              });\n\n            case 6:\n              Router.push('/');\n              _context.next = 13;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](3);\n              console.error(_context.t0);\n              setErrorMessage(_context.t0.message);\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 9]]);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create new todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"test\",\n          name: \"task\",\n          placeholder: \"e.g. do something\",\n          ref: register({\n            required: 'Task is required'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, _this), errors.task && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.task.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      role: \"alert\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(New, \"QZ0RwANFYWiMgePVx2j1c5w862U=\", false, function () {\n  return [useForm];\n});\n\n_c = New;\nexport default New;\n\nvar _c;\n\n$RefreshReg$(_c, \"New\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/new.js"],"names":["useState","Router","gql","useForm","Layout","graphQLClient","New","errorMessage","setErrorMessage","handleSubmit","register","errors","onSubmit","task","query","request","push","console","error","message","required"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA;;AAAA,kBACwBN,QAAQ,CAAC,EAAD,CADhC;AAAA,MACTO,YADS;AAAA,MACKC,eADL;;AAAA,iBAE2BL,OAAO,EAFlC;AAAA,MAERM,YAFQ,YAERA,YAFQ;AAAA,MAEMC,QAFN,YAEMA,QAFN;AAAA,MAEgBC,MAFhB,YAEgBA,MAFhB;;AAIhB,MAAMC,QAAQ,GAAGH,YAAY;AAAA,yEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASI,cAAAA,IAAT,QAASA,IAAT;AAC5B,kBAAIN,YAAJ,EAAkBC,eAAe,CAAC,EAAD,CAAf;AAEZM,cAAAA,KAHsB,GAGdZ,GAHc;AAAA;AAAA;AAAA,qBAapBG,aAAa,CAACU,OAAd,CAAsBD,KAAtB,EAA6B;AAAED,gBAAAA,IAAI,EAAJA;AAAF,eAA7B,CAboB;;AAAA;AAc1BZ,cAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AAd0B;AAAA;;AAAA;AAAA;AAAA;AAgB1BC,cAAAA,OAAO,CAACC,KAAR;AACAV,cAAAA,eAAe,CAAC,YAAMW,OAAP,CAAf;;AAjB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;;AAAA;AAAA;AAAA;AAAA,MAA7B;AAqBA,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAGE;AAAM,MAAA,QAAQ,EAAEP,QAAhB;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,WAAW,EAAC,mBAHd;AAIE,UAAA,GAAG,EAAEF,QAAQ,CAAC;AAAEU,YAAAA,QAAQ,EAAE;AAAZ,WAAD;AAJf;AAAA;AAAA;AAAA;AAAA,iBAFF,EAQGT,MAAM,CAACE,IAAP,iBACC;AAAM,UAAA,IAAI,EAAC,OAAX;AAAA,oBACGF,MAAM,CAACE,IAAP,CAAYM;AADf;AAAA;AAAA;AAAA;AAAA,iBATJ;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAgBE;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,eAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,EAwBGZ,YAAY,iBACX;AAAG,MAAA,IAAI,EAAC,OAAR;AAAA,gBACGA;AADH;AAAA;AAAA;AAAA;AAAA,aAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAgCD,CAzDD;;GAAMD,G;UAEuCH,O;;;KAFvCG,G;AA2DN,eAAeA,GAAf","sourcesContent":["import { useState } from 'react'\nimport Router from 'next/router'\nimport { gql } from 'graphql-request'\nimport { useForm } from 'react-hook-form'\nimport Layout from '../components/layout'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst New = () => {\n  const [errorMessage, setErrorMessage] = useState('')\n  const { handleSubmit, register, errors } = useForm()\n\n  const onSubmit = handleSubmit(async ({ task }) => {\n    if (errorMessage) setErrorMessage('')\n\n    const query = gql`\n      mutation CreateATodo($task: String!) {\n        createTodo(data: { task: $task, completed: false }) {\n          task\n          completed\n        }\n      }\n    `\n\n    try {\n      await graphQLClient.request(query, { task })\n      Router.push('/')\n    } catch (error) {\n      console.error(error)\n      setErrorMessage(error.message)\n    }\n  })\n\n  return (\n    <Layout>\n      <h1>Create new todo</h1>\n\n      <form onSubmit={onSubmit}>\n        <div>\n          <label>Task</label>\n          <input\n            type=\"test\"\n            name=\"task\"\n            placeholder=\"e.g. do something\"\n            ref={register({ required: 'Task is required' })}\n          />\n          {errors.task && (\n            <span role=\"alert\">\n              {errors.task.message}\n            </span>\n          )}\n        </div>\n\n        <div>\n          <button type=\"submit\">Create</button>\n        </div>\n      </form>\n\n      {errorMessage && (\n        <p role=\"alert\">\n          {errorMessage}\n        </p>\n      )}\n    </Layout>\n  )\n}\n\nexport default New\n"]},"metadata":{},"sourceType":"module"}