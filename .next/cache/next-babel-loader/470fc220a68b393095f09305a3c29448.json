{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        allTodos {\\n          data {\\n            _id\\n            task\\n            completed\\n          }\\n        }    \\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport useSWR from 'swr';\nimport Link from 'next/link';\nimport { gql } from 'graphql-request';\nimport Layout from '../components/layout';\nimport styles from '../styles/Home.module.css';\nimport { graphQLClient } from '../utils/graphql-client';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLClient.request(query);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function Home() {\n  _s();\n\n  var _this = this;\n\n  var _useSWR = useSWR(gql(_templateObject()), fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Next Fauna GraphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/new\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Create new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.allTodos.data.map(function (todo) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.todo,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: todo.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, _this)\n        }, todo._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/index.js"],"names":["useSWR","Link","gql","Layout","styles","graphQLClient","fetcher","query","request","Home","data","error","allTodos","map","todo","task","_id"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,KAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AAEA,IAAMC,OAAO;AAAA,sEAAG,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAuBF,aAAa,CAACG,OAAd,CAAsBD,KAAtB,CAAvB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb;;AAEA,eAAe,SAASG,IAAT,GAAgB;AAAA;;AAAA;;AAAA,gBACLT,MAAM,CAC5BE,GAD4B,qBAWzBI,OAXyB,CADD;AAAA,MACrBI,IADqB,WACrBA,IADqB;AAAA,MACfC,KADe,WACfA,KADe;;AAe7B,MAAIA,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,MAAX;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,EAKGD,IAAI,gBACH;AAAA,gBACGA,IAAI,CAACE,QAAL,CAAcF,IAAd,CAAmBG,GAAnB,CAAuB,UAACC,IAAD;AAAA,4BACtB;AAAmB,UAAA,SAAS,EAAEV,MAAM,CAACU,IAArC;AAAA,iCACE;AAAA,sBAAOA,IAAI,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF,WAASD,IAAI,CAACE,GAAd;AAAA;AAAA;AAAA;AAAA,iBADsB;AAAA,OAAvB;AADH;AAAA;AAAA;AAAA;AAAA,YADG,gBASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GApCuBP,I;UACET,M;;;KADFS,I","sourcesContent":["import useSWR from 'swr'\nimport Link from 'next/link'\nimport { gql } from 'graphql-request'\nimport Layout from '../components/layout'\nimport styles from '../styles/Home.module.css'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst fetcher = async (query) => await graphQLClient.request(query)\n\nexport default function Home() {\n  const { data, error } = useSWR(\n    gql`\n      {\n        allTodos {\n          data {\n            _id\n            task\n            completed\n          }\n        }    \n      }\n    `, fetcher\n  )\n\n  if (error) return <div>Error...</div>\n\n  return (\n    <Layout>\n      <h1>Next Fauna GraphQL</h1>\n      <Link href=\"/new\">\n        <a>Create new todo</a>\n      </Link>\n      {data ? (\n        <ul>\n          {data.allTodos.data.map((todo) => (\n            <li key={todo._id} className={styles.todo}>\n              <span>{todo.task}</span>\n            </li>\n          ))}\n        </ul>\n      ): (\n        <div>Loading...</div>\n      )}\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}