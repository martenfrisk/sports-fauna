{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/index.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\\n          _id\\n          completed\\n        }\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        allTodos {\\n          data {\\n            _id\\n            task\\n            completed\\n          }\\n        }    \\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport useSWR from 'swr';\nimport Link from 'next/link';\nimport { gql } from 'graphql-request';\nimport Layout from '../components/layout';\nimport styles from '../styles/Home.module.css';\nimport { graphQLClient } from '../utils/graphql-client';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLClient.request(query);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function Home() {\n  _s();\n\n  var _this = this;\n\n  var _useSWR = useSWR(gql(_templateObject()), fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error,\n      mutate = _useSWR.mutate;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 21\n  }, this);\n\n  var toggleTodo = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, completed) {\n      var query, variables;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              query = gql(_templateObject2());\n              variables = {\n                id: id,\n                completed: !completed\n              };\n              _context2.prev = 2;\n              _context2.next = 5;\n              return graphQLClient.request(query, variables);\n\n            case 5:\n              mutate();\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 8]]);\n    }));\n\n    return function toggleTodo(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Next Fauna GraphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/new\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        children: \"Create new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: data.allTodos.data.map(function (todo) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.todo,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: function onClick() {\n              return toggleTodo(todo._id, todo.completed);\n            },\n            style: todo.completed ? {\n              textDecorationLine: 'line-through'\n            } : {\n              textDecorationLine: 'none'\n            },\n            children: todo.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, _this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/todo/[id]\",\n            as: \"/todo/\".concat(todo._id),\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, _this)]\n        }, todo._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"pbBX9XurWnZRjcYBDDzfT5aPhoI=\", false, function () {\n  return [useSWR];\n});\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/index.js"],"names":["useSWR","Link","gql","Layout","styles","graphQLClient","fetcher","query","request","Home","data","error","mutate","toggleTodo","id","completed","variables","console","allTodos","map","todo","_id","textDecorationLine","task"],"mappings":"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","sourcesContent":["import useSWR from 'swr'\nimport Link from 'next/link'\nimport { gql } from 'graphql-request'\nimport Layout from '../components/layout'\nimport styles from '../styles/Home.module.css'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst fetcher = async (query) => await graphQLClient.request(query)\n\nexport default function Home() {\n  const { data, error, mutate } = useSWR(\n    gql`\n      {\n        allTodos {\n          data {\n            _id\n            task\n            completed\n          }\n        }    \n      }\n    `, fetcher\n  )\n\n  if (error) return <div>Error...</div>\n\n  const toggleTodo = async (id, completed) => {\n    const query = gql`\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\n          _id\n          completed\n        }\n      }\n    `\n\n    const variables = {\n      id,\n      completed: !completed,\n    }\n\n    try {\n      await graphQLClient.request(query, variables)\n      mutate()\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <Layout>\n      <h1>Next Fauna GraphQL</h1>\n      <Link href=\"/new\">\n        <a>Create new todo</a>\n      </Link>\n     \n      {data ? (\n        <ul>\n          {data.allTodos.data.map((todo) => (\n            <li key={todo._id} className={styles.todo}>\n              <span\n                onClick={() => toggleTodo(todo._id, todo.completed)}\n                style={\n                  todo.completed\n                    ? { textDecorationLine: 'line-through' }\n                    : { textDecorationLine: 'none' }\n                }\n              >\n                {todo.task}\n              </span>\n              <Link href=\"/todo/[id]\" as={`/todo/${todo._id}`}>\n                <a>Edit</a>\n              </Link>\n            </li>\n          ))}\n        </ul>\n      ): (\n        <div>Loading...</div>\n      )}\n    </Layout>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}