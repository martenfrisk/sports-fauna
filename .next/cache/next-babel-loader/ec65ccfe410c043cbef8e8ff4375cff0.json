{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/components/edit-form.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport { gql } from 'graphql-request';\nimport { useForm } from 'react-hook-form';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nconst EditForm = ({\n  defaultValues,\n  id,\n  token\n}) => {\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    handleSubmit,\n    register,\n    reset,\n    errors\n  } = useForm({\n    defaultValues: _objectSpread({}, defaultValues)\n  });\n  const onSubmit = handleSubmit(async ({\n    task,\n    completed\n  }) => {\n    if (errorMessage) setErrorMessage('');\n    const query = gql`\n      mutation UpdateATodo($id: ID!, $task: String!, $completed: Boolean!) {\n        updateTodo(id: $id, data: { task: $task, completed: $completed}) {\n          task\n          completed\n        }\n      }\n    `;\n    const variables = {\n      id,\n      task,\n      completed\n    };\n\n    try {\n      await graphQLClient(token).request(query, variables);\n      Router.push('/');\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error.message);\n    }\n  });\n  useEffect(() => {\n    reset(defaultValues);\n  }, [reset, defaultValues]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"task\",\n          ref: register({\n            required: 'Task is required'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 6\n        }, this), errors.task && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.task.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"completed\",\n          ref: register()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this), errors.completed && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.completed.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      role: \"alert\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\nexport default EditForm;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/components/edit-form.tsx"],"names":["useState","useEffect","Router","gql","useForm","graphQLClient","EditForm","defaultValues","id","token","errorMessage","setErrorMessage","handleSubmit","register","reset","errors","onSubmit","task","completed","query","variables","request","push","error","console","message","required"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Router from 'next/router'\nimport { gql } from 'graphql-request'\nimport { useForm } from 'react-hook-form'\nimport { graphQLClient } from '@/utils/graphql-client'\n\nconst EditForm = ({ defaultValues, id, token }: { defaultValues: any, id: any, token: any }) => {\n\tconst [errorMessage, setErrorMessage] = useState('')\n\n\tconst { handleSubmit, register, reset, errors } = useForm({\n\t\tdefaultValues: {\n\t\t\t...defaultValues,\n\t\t},\n\t})\n\n\tconst onSubmit = handleSubmit(async ({ task, completed }) => {\n\t\tif (errorMessage) setErrorMessage('')\n\n\t\tconst query = gql`\n      mutation UpdateATodo($id: ID!, $task: String!, $completed: Boolean!) {\n        updateTodo(id: $id, data: { task: $task, completed: $completed}) {\n          task\n          completed\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tid,\n\t\t\ttask,\n\t\t\tcompleted,\n\t\t}\n\n\t\ttry {\n\t\t\tawait graphQLClient(token).request(query, variables)\n\t\t\tRouter.push('/')\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tsetErrorMessage(error.message)\n\t\t}\n\t}) \n\n\tuseEffect(() => {\n\t\treset(defaultValues)\n\t}, [reset, defaultValues])\n\n\treturn (\n\t\t<>\n\t\t\t<form onSubmit={onSubmit}>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Task</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"task\"\n\t\t\t\t\t\tref={register({ required: 'Task is required' })}\n\t\t\t\t\t/>\n\t\t\t\t\t{errors.task && (\n\t\t\t\t\t\t<span role=\"alert\">\n\t\t\t\t\t\t\t{errors.task.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<label>Completed</label>\n\t\t\t\t\t<input type=\"checkbox\" name=\"completed\" ref={register()} />\n\t\t\t\t\t{errors.completed && (\n\t\t\t\t\t\t<span role=\"alert\">\n\t\t\t\t\t\t\t{errors.completed.message}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<button type=\"submit\">Update</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\n\t\t\t{errorMessage && (\n\t\t\t\t<p role=\"alert\">\n\t\t\t\t\t{errorMessage}\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default EditForm"]},"metadata":{},"sourceType":"module"}