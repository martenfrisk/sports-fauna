{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/components/edit-form.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport { gql } from 'graphql-request';\nimport { useForm } from 'react-hook-form';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nconst EditForm = ({\n  defaultValues,\n  id\n}) => {\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    handleSubmit,\n    register,\n    reset,\n    errors\n  } = useForm({\n    defaultValues: _objectSpread({}, defaultValues)\n  });\n  const onSubmit = handleSubmit(async ({\n    task,\n    completed\n  }) => {\n    if (errorMessage) setErrorMessage('');\n    const query = gql`\n      mutation UpdateATodo($id: ID!, $task: String!, $completed: Boolean!) {\n        updateTodo(id: $id, data: { task: $task, completed: $completed}) {\n          task\n          completed\n        }\n      }\n    `;\n    const variables = {\n      id,\n      task,\n      completed\n    };\n\n    try {\n      await graphQLClient.request(query, variables);\n      Router.push('/');\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error.message);\n    }\n  });\n  useEffect(() => {\n    reset(defaultValues);\n  }, [reset, defaultValues]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"task\",\n          ref: register({\n            required: 'Task is required'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), errors.task && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.task.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: \"completed\",\n          ref: register()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), errors.completed && /*#__PURE__*/_jsxDEV(\"span\", {\n          role: \"alert\",\n          children: errors.completed.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      role: \"alert\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nexport default EditForm;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/components/edit-form.js"],"names":["useState","useEffect","Router","gql","useForm","graphQLClient","EditForm","defaultValues","id","errorMessage","setErrorMessage","handleSubmit","register","reset","errors","onSubmit","task","completed","query","variables","request","push","error","console","message","required"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Router from 'next/router'\nimport { gql } from 'graphql-request'\nimport { useForm } from 'react-hook-form'\nimport { graphQLClient } from '@/utils/graphql-client'\n\nconst EditForm = ({ defaultValues, id }) => {\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const { handleSubmit, register, reset, errors } = useForm({\n    defaultValues: {\n      ...defaultValues,\n    },\n  })\n\n  const onSubmit = handleSubmit(async ({ task, completed }) => {\n    if (errorMessage) setErrorMessage('')\n\n    const query = gql`\n      mutation UpdateATodo($id: ID!, $task: String!, $completed: Boolean!) {\n        updateTodo(id: $id, data: { task: $task, completed: $completed}) {\n          task\n          completed\n        }\n      }\n    `\n\n    const variables = {\n      id,\n      task,\n      completed,\n    }\n\n    try {\n      await graphQLClient.request(query, variables)\n      Router.push('/')\n    } catch (error) {\n      console.error(error)\n      setErrorMessage(error.message)\n    }\n  }) \n\n  useEffect(() => {\n    reset(defaultValues)\n  }, [reset, defaultValues])\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <div>\n          <label>Task</label>\n          <input\n            type=\"text\"\n            name=\"task\"\n            ref={register({ required: 'Task is required' })}\n          />\n          {errors.task && (\n            <span role=\"alert\">\n              {errors.task.message}\n            </span>\n          )}\n        </div>\n\n        <div>\n          <label>Completed</label>\n          <input type=\"checkbox\" name=\"completed\" ref={register()} />\n          {errors.completed && (\n            <span role=\"alert\">\n              {errors.completed.message}\n            </span>\n          )}\n        </div>\n\n        <div>\n          <button type=\"submit\">Update</button>\n        </div>\n      </form>\n\n      {errorMessage && (\n        <p role=\"alert\">\n          {errorMessage}\n        </p>\n      )}\n    </>\n  )\n}\n\nexport default EditForm"]},"metadata":{},"sourceType":"module"}