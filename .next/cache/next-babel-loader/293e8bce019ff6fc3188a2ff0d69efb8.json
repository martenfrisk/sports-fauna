{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { query as q } from 'faunadb';\nimport { authClient } from '@/utils/fauna-client';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nexport default async function user(req, res) {\n  const token = getAuthCookie(req);\n\n  if (!token) {\n    return res.status(401).send('Auth cookie not found');\n  }\n\n  try {\n    const {\n      ref,\n      data\n    } = await authClient(token).query(q.Get(q.CurrentIdentity()));\n    res.status(200).json(_objectSpread(_objectSpread({}, data), {}, {\n      id: ref.id\n    }));\n  } catch (error) {\n    console.error(error);\n    res.status(error.requestResult.statusCode).send(error.message);\n  }\n}","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/api/user.js"],"names":["query","q","authClient","getAuthCookie","user","req","res","token","status","send","ref","data","Get","CurrentIdentity","json","id","error","console","requestResult","statusCode","message"],"mappings":";;;;;;AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,eAAe,eAAeC,IAAf,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5C,QAAMC,KAAK,GAAGJ,aAAa,CAACE,GAAD,CAA3B;;AAEA,MAAI,CAACE,KAAL,EAAY;AACX,WAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB,CAAP;AACA;;AAED,MAAI;AACH,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgB,MAAMT,UAAU,CAACK,KAAD,CAAV,CAAkBP,KAAlB,CAAwBC,CAAC,CAACW,GAAF,CAAMX,CAAC,CAACY,eAAF,EAAN,CAAxB,CAA5B;AACAP,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,iCAA0BH,IAA1B;AAAgCI,MAAAA,EAAE,EAAEL,GAAG,CAACK;AAAxC;AACA,GAHD,CAGE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAV,IAAAA,GAAG,CAACE,MAAJ,CAAWQ,KAAK,CAACE,aAAN,CAAoBC,UAA/B,EAA2CV,IAA3C,CAAgDO,KAAK,CAACI,OAAtD;AACA;AACD","sourcesContent":["import { query as q } from 'faunadb'\nimport { authClient } from '@/utils/fauna-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\n\nexport default async function user(req, res) {\n\tconst token = getAuthCookie(req)\n\n\tif (!token) {\n\t\treturn res.status(401).send('Auth cookie not found')\n\t}\n\n\ttry {\n\t\tconst { ref, data } = await authClient(token).query(q.Get(q.CurrentIdentity()))\n\t\tres.status(200).json({ ...data, id: ref.id })\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\tres.status(error.requestResult.statusCode).send(error.message)\n\t}\n}"]},"metadata":{},"sourceType":"module"}