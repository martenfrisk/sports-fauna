{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { guestClient } from '@/utils/fauna-client';\nimport { setAuthCookie } from '@/utils/auth-cookies';\nexport default async function signup(req, res) {\n  const {\n    email,\n    username,\n    favTeam,\n    password\n  } = req.body;\n  const leagues = '';\n\n  if (!email || !password) {\n    return res.status(400).send('Email and password not provided');\n  }\n\n  try {\n    const existingEmail = await guestClient.query(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(email))));\n\n    if (existingEmail) {\n      return res.status(400).send(`Email ${email} already exists`);\n    }\n\n    const user = await guestClient.query(q.Create(q.Collection('User'), {\n      credentials: {\n        password\n      },\n      data: {\n        email,\n        username,\n        favTeam,\n        leagues\n      }\n    }));\n\n    if (!user.ref) {\n      return res.status(404).send('User ref is missing');\n    }\n\n    const auth = await guestClient.query(q.Login(user.ref, {\n      password\n    }));\n\n    if (!auth.secret) {\n      return res.status(404).send('Auth secret is missing');\n    }\n\n    setAuthCookie(res, auth.secret);\n    res.status(200).end();\n  } catch (error) {\n    console.error(error);\n    res.status(error.requestResult.statusCode).send(error.message);\n  }\n}","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/api/signup.js"],"names":["query","q","guestClient","setAuthCookie","signup","req","res","email","username","favTeam","password","body","leagues","status","send","existingEmail","Exists","Match","Index","Casefold","user","Create","Collection","credentials","data","ref","auth","Login","secret","end","error","console","requestResult","statusCode","message"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,eAAe,eAAeC,MAAf,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAyCL,GAAG,CAACM,IAAnD;AACA,QAAMC,OAAO,GAAG,EAAhB;;AACA,MAAI,CAACL,KAAD,IAAU,CAACG,QAAf,EAAyB;AACxB,WAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,iCAArB,CAAP;AACA;;AAED,MAAI;AACH,UAAMC,aAAa,GAAG,MAAMb,WAAW,CAACF,KAAZ,CAC3BC,CAAC,CAACe,MAAF,CAASf,CAAC,CAACgB,KAAF,CAAQhB,CAAC,CAACiB,KAAF,CAAQ,eAAR,CAAR,EAAkCjB,CAAC,CAACkB,QAAF,CAAWZ,KAAX,CAAlC,CAAT,CAD2B,CAA5B;;AAIA,QAAIQ,aAAJ,EAAmB;AAClB,aAAOT,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,SAAQP,KAAM,iBAApC,CAAP;AACA;;AAED,UAAMa,IAAI,GAAG,MAAMlB,WAAW,CAACF,KAAZ,CAClBC,CAAC,CAACoB,MAAF,CAASpB,CAAC,CAACqB,UAAF,CAAa,MAAb,CAAT,EAA+B;AAC9BC,MAAAA,WAAW,EAAE;AAAEb,QAAAA;AAAF,OADiB;AAE9Bc,MAAAA,IAAI,EAAE;AAAEjB,QAAAA,KAAF;AAASC,QAAAA,QAAT;AAAmBC,QAAAA,OAAnB;AAA4BG,QAAAA;AAA5B;AAFwB,KAA/B,CADkB,CAAnB;;AAOA,QAAI,CAACQ,IAAI,CAACK,GAAV,EAAe;AACd,aAAOnB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACA;;AAED,UAAMY,IAAI,GAAG,MAAMxB,WAAW,CAACF,KAAZ,CAClBC,CAAC,CAAC0B,KAAF,CAAQP,IAAI,CAACK,GAAb,EAAkB;AACjBf,MAAAA;AADiB,KAAlB,CADkB,CAAnB;;AAMA,QAAI,CAACgB,IAAI,CAACE,MAAV,EAAkB;AACjB,aAAOtB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB,CAAP;AACA;;AAEDX,IAAAA,aAAa,CAACG,GAAD,EAAMoB,IAAI,CAACE,MAAX,CAAb;AAEAtB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBgB,GAAhB;AACA,GAjCD,CAiCE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAxB,IAAAA,GAAG,CAACO,MAAJ,CAAWiB,KAAK,CAACE,aAAN,CAAoBC,UAA/B,EAA2CnB,IAA3C,CAAgDgB,KAAK,CAACI,OAAtD;AACA;AACD","sourcesContent":["import { query as q } from 'faunadb'\nimport { guestClient } from '@/utils/fauna-client'\nimport { setAuthCookie } from '@/utils/auth-cookies'\n\nexport default async function signup(req, res) {\n\tconst { email, username, favTeam, password } = req.body\n\tconst leagues = ''\n\tif (!email || !password) {\n\t\treturn res.status(400).send('Email and password not provided')\n\t}\n\n\ttry {\n\t\tconst existingEmail = await guestClient.query(\n\t\t\tq.Exists(q.Match(q.Index('user_by_email'), q.Casefold(email)))\n\t\t)\n\n\t\tif (existingEmail) {\n\t\t\treturn res.status(400).send(`Email ${email} already exists`)\n\t\t}\n\n\t\tconst user = await guestClient.query(\n\t\t\tq.Create(q.Collection('User'), {\n\t\t\t\tcredentials: { password },\n\t\t\t\tdata: { email, username, favTeam, leagues },\n\t\t\t})\n\t\t)\n\n\t\tif (!user.ref) {\n\t\t\treturn res.status(404).send('User ref is missing')\n\t\t}\n\n\t\tconst auth = await guestClient.query(\n\t\t\tq.Login(user.ref, {\n\t\t\t\tpassword,\n\t\t\t})\n\t\t)\n\n\t\tif (!auth.secret) {\n\t\t\treturn res.status(404).send('Auth secret is missing')\n\t\t}\n\n\t\tsetAuthCookie(res, auth.secret)\n\n\t\tres.status(200).end()\n\t} catch (error) {\n\t\tconsole.error(error)\n\t\tres.status(error.requestResult.statusCode).send(error.message)\n\t}\n}"]},"metadata":{},"sourceType":"module"}