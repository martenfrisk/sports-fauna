{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/components/leagues.tsx\";\nimport { graphQLClient } from '@/utils/graphql-client';\nimport Link from 'next/link';\nimport { UserContext } from '@/utils/user-context';\nimport { gql } from 'graphql-request';\nimport { useContext, useEffect } from 'react';\nimport useSWR from 'swr';\n\nconst Leagues = ({\n  token,\n  leagueData\n}) => {\n  const {\n    userID,\n    setUserID\n  } = useContext(UserContext);\n\n  const fetcher = url => fetch(url).then(r => r.json());\n\n  const {\n    data,\n    error\n  } = useSWR('/api/user', fetcher);\n  useEffect(() => {\n    setUserID(() => data);\n  }, []);\n  if (error) console.error(error);\n  const {\n    mutate\n  } = useSWR(gql`\n      {\n        allLeagues {\n          data {\n            name\n          }\n        }\n      }\n    `, fetcher);\n\n  const joinLeague = async (userID, leagueID) => {\n    const mutation = gql`\n      mutation JoinLeague($userID: [ID], $leagueID: ID!) {\n        partialUpdateLeague(id: $leagueID, data: { members: { connect: $userID } } ) {\n          name\n        }\n      }\n    `;\n    const variables = {\n      userID,\n      leagueID\n    };\n\n    try {\n      await graphQLClient(token).setHeader('X-Schema-Preview', 'partial-update-mutation').request(mutation, variables);\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return leagueData && /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Leagues\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), leagueData.data.map(league => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/league/[id]\",\n          as: `/league/${league._id}`,\n          children: league.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => joinLeague(userID.id, league._id),\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), league.members.data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-2\",\n        children: [\"-\", league.members.data.map(member => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2\",\n          children: member.username\n        }, member._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 10\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 8\n      }, this)]\n    }, league._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 6\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 4\n  }, this);\n};\n\nexport default Leagues;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/components/leagues.tsx"],"names":["graphQLClient","Link","UserContext","gql","useContext","useEffect","useSWR","Leagues","token","leagueData","userID","setUserID","fetcher","url","fetch","then","r","json","data","error","console","mutate","joinLeague","leagueID","mutation","variables","setHeader","request","map","league","_id","name","id","members","length","member","username"],"mappings":"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","sourcesContent":["import { graphQLClient } from '@/utils/graphql-client'\nimport Link from 'next/link'\nimport { UserContext } from '@/utils/user-context'\nimport { gql } from 'graphql-request'\nimport { useContext, useEffect } from 'react'\nimport useSWR from 'swr'\n\nconst Leagues = ({ token, leagueData }: { token: any, leagueData: any }) => {\n\tconst { userID, setUserID } = useContext(UserContext)\n\tconst fetcher = (url) => fetch(url).then((r) => r.json())\n\tconst { data, error } = useSWR('/api/user', fetcher)\n\tuseEffect(() => {\n\t\tsetUserID(() => data)\n\t}, [])\n\tif (error) console.error(error)\n\tconst { mutate } = useSWR(\n\t\tgql`\n      {\n        allLeagues {\n          data {\n            name\n          }\n        }\n      }\n    `,\n\t\tfetcher\n\t)\n\n\n\tconst joinLeague = async (userID, leagueID) => {\n\t\tconst mutation = gql`\n      mutation JoinLeague($userID: [ID], $leagueID: ID!) {\n        partialUpdateLeague(id: $leagueID, data: { members: { connect: $userID } } ) {\n          name\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tuserID,\n\t\t\tleagueID\n\t\t}\n\n\t\ttry {\n\t\t\tawait graphQLClient(token)\n\t\t\t\t.setHeader('X-Schema-Preview', 'partial-update-mutation')\n\t\t\t\t.request(mutation, variables)\n\t\t\tmutate()\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t}\n\t}\n\n\treturn (\n\t\tleagueData && (\n\t\t\t<div>\n\t\t\t\t<p>Leagues</p>\n\t\t\t\t{leagueData.data.map((league) => (\n\t\t\t\t\t<div className=\"flex\" key={league._id}>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<Link href=\"/league/[id]\" as={`/league/${league._id}`}>\n\t\t\t\t\t\t\t\t{league.name}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button onClick={() => joinLeague(userID.id, league._id)}>Join</button>\n\t\t\t\t\t\t{league.members.data.length > 0 && (\n\t\t\t\t\t\t\t<div className=\"ml-2\">\n\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t{league.members.data.map((member) => (\n\t\t\t\t\t\t\t\t\t<span className=\"ml-2\" key={member._id}>\n\t\t\t\t\t\t\t\t\t\t{member.username}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t)\n}\n\nexport default Leagues"]},"metadata":{},"sourceType":"module"}