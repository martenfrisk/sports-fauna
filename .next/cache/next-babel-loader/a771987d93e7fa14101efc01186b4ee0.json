{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation DeleteATodo($id: ID!) {\\n        deleteTodo(id: $id) {\\n          _id\\n        }\\n      }\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\\n          _id\\n          completed\\n        }\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      {\\n        allTodos {\\n          data {\\n            _id\\n            task\\n            completed\\n          }\\n        }    \\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport useSWR from 'swr';\nimport Link from 'next/link';\nimport { gql } from 'graphql-request';\nimport Layout from '../components/layout';\nimport { graphQLClient } from '../utils/graphql-client';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphQLClient.request(query);\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar Home = function Home() {\n  _s();\n\n  var _useSWR = useSWR(gql(_templateObject()), fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error,\n      mutate = _useSWR.mutate;\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Error...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 20\n  }, _this);\n\n  var toggleTodo = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id, completed) {\n      var query, variables;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              query = gql(_templateObject2());\n              variables = {\n                id: id,\n                completed: !completed\n              };\n              _context2.prev = 2;\n              _context2.next = 5;\n              return graphQLClient.request(query, variables);\n\n            case 5:\n              mutate();\n              _context2.next = 11;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.error(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 8]]);\n    }));\n\n    return function toggleTodo(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var deleteATodo = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n      var query;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              query = gql(_templateObject3());\n              _context3.prev = 1;\n              _context3.next = 4;\n              return graphQLClient.request(query, {\n                id: id\n              });\n\n            case 4:\n              mutate();\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.error(_context3.t0);\n\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 7]]);\n    }));\n\n    return function deleteATodo(_x4) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl\",\n        children: \"Next Fauna GraphQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, _this), /*#__PURE__*/_jsxDEV(Link, {\n        href: \"/new\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"w-auto border-b border-black border-dashed hover:text-blue-700\",\n          children: \"Create new todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 6\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, _this), data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col flex-wrap w-full\",\n      children: data.allTodos.data.map(function (todo) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: function onClick() {\n              return toggleTodo(todo._id, todo.completed);\n            },\n            style: todo.completed ? {\n              textDecorationLine: 'line-through'\n            } : {\n              textDecorationLine: 'none'\n            },\n            children: todo.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 8\n          }, _this), /*#__PURE__*/_jsxDEV(Link, {\n            href: \"/todo/[id]\",\n            as: \"/todo/\".concat(todo._id),\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 9\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 8\n          }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: function onClick() {\n              return deleteATodo(todo._id);\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 8\n          }, _this)]\n        }, todo._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 7\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(Home, \"pbBX9XurWnZRjcYBDDzfT5aPhoI=\", false, function () {\n  return [useSWR];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/index.tsx"],"names":["useSWR","Link","gql","Layout","graphQLClient","fetcher","query","request","Home","data","error","mutate","toggleTodo","id","completed","variables","console","deleteATodo","allTodos","map","todo","_id","textDecorationLine","task"],"mappings":"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","sourcesContent":["import useSWR from 'swr'\nimport Link from 'next/link'\nimport { gql } from 'graphql-request'\nimport Layout from '../components/layout'\nimport { graphQLClient } from '../utils/graphql-client'\n\nconst fetcher = async (query) => await graphQLClient.request(query)\n\nconst Home = () => {\n\tconst { data, error, mutate } = useSWR(\n\t\tgql`\n      {\n        allTodos {\n          data {\n            _id\n            task\n            completed\n          }\n        }    \n      }\n    `, fetcher\n\t)\n\n\tif (error) return <div>Error...</div>\n\n\tconst toggleTodo = async (id, completed) => {\n\t\tconst query = gql`\n      mutation PartialUpdateTodo($id: ID!, $completed: Boolean!) {\n        partialUpdateTodo(id: $id, data: { completed: $completed }) {\n          _id\n          completed\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tid,\n\t\t\tcompleted: !completed,\n\t\t}\n\n\t\ttry {\n\t\t\tawait graphQLClient.request(query, variables)\n\t\t\tmutate()\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t}\n\t}\n\n\tconst deleteATodo = async (id) => {\n\t\tconst query = gql`\n      mutation DeleteATodo($id: ID!) {\n        deleteTodo(id: $id) {\n          _id\n        }\n      }\n    `\n\n\t\ttry {\n\t\t\tawait graphQLClient.request(query, { id })\n\t\t\tmutate()\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className=\"flex flex-col\">\n\t\t\t\t<h1 className=\"text-3xl\">Next Fauna GraphQL</h1>\n\t\t\t\t<Link href=\"/new\">\n\t\t\t\t\t<a className=\"w-auto border-b border-black border-dashed hover:text-blue-700\">Create new todo</a>\n\t\t\t\t</Link>\n\t\t\t</div>\n     \n\t\t\t{data ? (\n\t\t\t\t<div className=\"flex flex-col flex-wrap w-full\">\n\t\t\t\t\t{data.allTodos.data.map((todo) => (\n\t\t\t\t\t\t<div key={todo._id} className=\"w-full\">\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tonClick={() => toggleTodo(todo._id, todo.completed)}\n\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\ttodo.completed\n\t\t\t\t\t\t\t\t\t\t? { textDecorationLine: 'line-through' }\n\t\t\t\t\t\t\t\t\t\t: { textDecorationLine: 'none' }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{todo.task}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<Link href=\"/todo/[id]\" as={`/todo/${todo._id}`}>\n\t\t\t\t\t\t\t\t<a>Edit</a>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<span onClick={() => deleteATodo(todo._id)}>\n                Delete\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}