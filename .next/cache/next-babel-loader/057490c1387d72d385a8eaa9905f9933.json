{"ast":null,"code":"import _regeneratorRuntime from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/marten.frisk/nextfauna/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/league/[id].tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation UpdateLeague($id: ID!, $name: String!, $teams: [String]) {\\n        updateLeague(id: $id, data: { name: $name, options: { create: { teams: $teams } } }) {\\n          name\\n          options {\\n\\t\\t\\t\\t\\t\\tteams\\n\\t\\t\\t\\t\\t}\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n// import { useRouter } from 'next/router'\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport TeamPicker from 'pages/teampicker';\nimport { useState } from 'react';\n\nvar League = function League(_ref) {\n  _s();\n\n  var data = _ref.data,\n      teams = _ref.teams,\n      token = _ref.token;\n\n  var _useState = useState(data.options.teams),\n      pickedTeam = _useState[0],\n      setPickedTeam = _useState[1];\n\n  var _useState2 = useState(''),\n      errorMessage = _useState2[0],\n      setErrorMessage = _useState2[1];\n\n  var updateTeam = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var query, variables;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = gql(_templateObject());\n              variables = {\n                id: data._id,\n                name: data.name,\n                teams: pickedTeam\n              };\n              _context.prev = 2;\n              _context.next = 5;\n              return graphQLClient(token).request(query, variables);\n\n            case 5:\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              console.error(_context.t0);\n              setErrorMessage(_context.t0.message);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 7]]);\n    }));\n\n    return function updateTeam() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"League info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, _this), data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"League name: \", data.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"League members:\", data.members.data.length > 0 ? data.members.data.map(function (item) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [item.username, \" (\", item.email, \")\"]\n          }, item.username, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 9\n          }, _this);\n        }) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2 text-sm italics\",\n          children: \"No members :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 8\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 6\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"League options:\", data.options ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-4 text-sm\",\n            children: data.options[\"class\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }, _this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.options[\"public\"] ? 'Public' : 'Private'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, _this), JSON.stringify(data.options)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 8\n        }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-2 text-sm italics\",\n          children: \"No options set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 8\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, _this), data.options.teams !== pickedTeam && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return updateTeam();\n      },\n      children: \"Click to save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, _this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(TeamPicker, {\n      teams: teams,\n      picker: [pickedTeam, setPickedTeam]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(League, \"ENrYS+TmqjWjH2GF8BThThS+S6o=\");\n\n_c = League;\nexport var __N_SSP = true;\nexport default League;\n\nvar _c;\n\n$RefreshReg$(_c, \"League\");","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/league/[id].tsx"],"names":["gql","Layout","graphQLClient","TeamPicker","useState","League","data","teams","token","options","pickedTeam","setPickedTeam","errorMessage","setErrorMessage","updateTeam","query","variables","id","_id","name","request","console","error","message","members","length","map","item","username","email","JSON","stringify"],"mappings":"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","sourcesContent":["// import { useRouter } from 'next/router'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport TeamPicker from 'pages/teampicker'\nimport { useState } from 'react'\n\nconst League = ({ data, teams, token }: { data: any, teams: any, token: any }) => {\n\tconst [pickedTeam, setPickedTeam] = useState(data.options.teams)\n\tconst [errorMessage, setErrorMessage] = useState('')\n\tconst updateTeam = async () => {\n\t\tconst query = gql`\n      mutation UpdateLeague($id: ID!, $name: String!, $teams: [String]) {\n        updateLeague(id: $id, data: { name: $name, options: { create: { teams: $teams } } }) {\n          name\n          options {\n\t\t\t\t\t\tteams\n\t\t\t\t\t}\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tid: data._id,\n\t\t\tname: data.name,\n\t\t\tteams: pickedTeam,\n\t\t}\n\n\t\ttry {\n\t\t\tawait graphQLClient(token).request(query, variables)\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tsetErrorMessage(error.message)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1>League info</h1>\n\n\t\t\t{data ? (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\tLeague name: {data.name}\n\t\t\t\t\t</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tLeague members: \n\t\t\t\t\t\t{data.members.data.length > 0 ? (\n\t\t\t\t\t\t\tdata.members.data.map((item) => (\n\t\t\t\t\t\t\t\t<div key={item.username}>\n\t\t\t\t\t\t\t\t\t{item.username} ({item.email})\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span className=\"ml-2 text-sm italics\">\n\t\t\t\t\t\t\t\tNo members :(\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tLeague options:\n\t\t\t\t\t\t{data.options ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span className=\"mr-4 text-sm\">\n\t\t\t\t\t\t\t\t\t{data.options.class}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"text-sm\">\n\t\t\t\t\t\t\t\t\t{data.options.public ? 'Public' : 'Private'}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{JSON.stringify(data.options)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"ml-2 text-sm italics\">\n\t\t\t\t\t\t\t\tNo options set\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t\t{data.options.teams !== pickedTeam && (\n\t\t\t\t<button onClick={() => updateTeam()}>Click to save changes</button>\n\t\t\t)}\n\t\t\t{errorMessage && (\n\t\t\t\t<p>{errorMessage}</p>\n\t\t\t)}\n\t\t\t<TeamPicker teams={teams} picker={[pickedTeam, setPickedTeam]} />\n\t\t</Layout>\n\t)\n}\n\n\nexport async function getServerSideProps(ctx: any) {\n\tconst { id } = ctx.params\n\tconst token = getAuthCookie(ctx.req)\n\n\tconst { teams } = await fetch('https://www.thesportsdb.com/api/v1/json/1/lookup_all_teams.php?id=4328').then((res) => res.json())\n\n\tconst query = gql`\n\t\tquery FindLeague($id: ID!) {\n\t\t\tfindLeagueByID(id: $id) {\n\t\t\t\tname\n\t\t\t\t_id\n\t\t\t\toptions {\n\t\t\t\t\tclass\n\t\t\t\t\tpublic\n\t\t\t\t\tteams\n\t\t\t\t\tdivisions\n\t\t\t\t}\n\t\t\t\tmembers {\n\t\t\t\t\tdata {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tusername\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}`\n\tconst res = await graphQLClient(token).request(query, {id})\n\tconsole.log(res)\n\tconst data = await res\n\n\treturn { props: { \n\t\ttoken: token || null,\n\t\tdata: data?.findLeagueByID,\n\t\tteams\n\t} }\n}\n\nexport default League"]},"metadata":{},"sourceType":"module"}