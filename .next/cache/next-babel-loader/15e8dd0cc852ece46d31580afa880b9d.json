{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\";\nimport { useEffect } from 'react';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\nimport Layout from '@/components/layout';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport user from './api/user';\n\nconst Profile = ({\n  token\n}) => {\n  let user;\n  const {\n    data = user\n  } = useSWR('/api/user'); // console.log(data)\n  // const [userTodos, setUserTodos] = useState()\n\n  const query = gql`\n\t\tquery MyQuery($id: ID!)\n\t\t\t{\n\t\t\t\tfindUserByID(id: $id) {\n\t\t\t\t\temail\n\t\t\t\t\ttodos {\n\t\t\t\t\t\tdata {\n\t\t\t\t\t\t\ttask\n\t\t\t\t\t\t\tcompleted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}    \n\t\t\t}\n\t`;\n  const variables = {\n    id: user && user.id\n  };\n\n  const fetcher = async () => await graphQLClient(token).request(query, variables);\n\n  let info;\n  console.log({\n    info\n  }); // const { data, error } = useSWR([query, variables], fetcher)\n\n  useEffect(() => {\n    fetcher();\n  }, [data]); // if (error) return (\n  // \t<Layout>\n  // \t\t<div>Error...</div>\n  // \t</Layout>\n  // )\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(info)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = await getAuthCookie(ctx.req);\n  const {\n    userInfo\n  } = user();\n  return {\n    props: {\n      token: token || null,\n      userInfo\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["useEffect","gql","useSWR","Layout","getAuthCookie","graphQLClient","user","Profile","token","data","query","variables","id","fetcher","request","info","console","log","JSON","stringify","getServerSideProps","ctx","req","userInfo","props"],"mappings":";;AAAA,SAASA,SAAT,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAC5C,MAAIF,IAAJ;AACA,QAAM;AAAEG,IAAAA,IAAI,GAAGH;AAAT,MAAkBJ,MAAM,CAAC,WAAD,CAA9B,CAF4C,CAG5C;AACA;;AACA,QAAMQ,KAAK,GAAGT,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAbC;AAeA,QAAMU,SAAS,GAAG;AACjBC,IAAAA,EAAE,EAAEN,IAAI,IAAIA,IAAI,CAACM;AADA,GAAlB;;AAIA,QAAMC,OAAO,GAAG,YAAY,MAAMR,aAAa,CAACG,KAAD,CAAb,CAChCM,OADgC,CACxBJ,KADwB,EACjBC,SADiB,CAAlC;;AAEA,MAAII,IAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA;AAAD,GAAZ,EA3B4C,CA4B5C;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACfa,IAAAA,OAAO;AACP,GAFQ,EAEN,CAACJ,IAAD,CAFM,CAAT,CA7B4C,CAiC5C;AACA;AACA;AACA;AACA;;AACA,sBACC,QAAC,MAAD;AAAA,cACGA,IAAI,gBACL;AAAA,gBACES,IAAI,CAACC,SAAL,CAAeJ,IAAf;AADF;AAAA;AAAA;AAAA;AAAA,YADK,gBAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CAjDD;;AAmDA,OAAO,eAAeK,kBAAf,CAAkCC,GAAlC,EAA4C;AAClD,QAAMb,KAAK,GAAG,MAAMJ,aAAa,CAACiB,GAAG,CAACC,GAAL,CAAjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAejB,IAAI,EAAzB;AACA,SAAO;AACNkB,IAAAA,KAAK,EAAE;AACNhB,MAAAA,KAAK,EAAEA,KAAK,IAAI,IADV;AAENe,MAAAA;AAFM;AADD,GAAP;AAMA;AAED,eAAehB,OAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { gql } from 'graphql-request'\nimport useSWR from 'swr'\nimport Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport user from './api/user'\n\nconst Profile = ({ token }: {token: any}) => {\n\tlet user\n\tconst { data = user } = useSWR('/api/user')\n\t// console.log(data)\n\t// const [userTodos, setUserTodos] = useState()\n\tconst query = gql`\n\t\tquery MyQuery($id: ID!)\n\t\t\t{\n\t\t\t\tfindUserByID(id: $id) {\n\t\t\t\t\temail\n\t\t\t\t\ttodos {\n\t\t\t\t\t\tdata {\n\t\t\t\t\t\t\ttask\n\t\t\t\t\t\t\tcompleted\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}    \n\t\t\t}\n\t`\n\n\tconst variables = {\n\t\tid: user && user.id\n\t}\n\n\tconst fetcher = async () => await graphQLClient(token)\n\t\t.request(query, variables)\n\tlet info\n\tconsole.log({info})\n\t// const { data, error } = useSWR([query, variables], fetcher)\n\tuseEffect(() => {\n\t\tfetcher()\n\t}, [data])\n\n\t// if (error) return (\n\t// \t<Layout>\n\t// \t\t<div>Error...</div>\n\t// \t</Layout>\n\t// )\n\treturn (\n\t\t<Layout>\n\t\t\t{ data ? (\n\t\t\t\t<div>\n\t\t\t\t\t{JSON.stringify(info)}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\tconst { userInfo } = user()\n\treturn { \n\t\tprops: { \n\t\t\ttoken: token || null,\n\t\t\tuserInfo\n\t\t}\n\t}\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}