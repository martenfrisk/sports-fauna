{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/profile.tsx\";\nimport { useEffect, useState } from 'react';\nimport { gql } from 'graphql-request';\nimport useSWR from 'swr';\nimport Layout from '@/components/layout';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nimport { graphQLClient } from '@/utils/graphql-client';\n\nconst Profile = ({\n  token\n}) => {\n  const {\n    data: user\n  } = useSWR('/api/user');\n  const {\n    0: userTodos,\n    1: setUserTodos\n  } = useState([]);\n  const query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`;\n  const variables = {\n    id: user && user.id\n  };\n\n  const fetcher = async query => await graphQLClient(token).request(query, variables);\n\n  const {\n    data,\n    error\n  } = useSWR([query, variables], fetcher);\n  console.log(data);\n  useEffect(() => {\n    setUserTodos(data);\n  }, [data]);\n  if (error) return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 3\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: JSON.stringify(userTodos)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const token = await getAuthCookie(ctx.req);\n  return {\n    props: {\n      token: token || null\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/profile.tsx"],"names":["useEffect","useState","gql","useSWR","Layout","getAuthCookie","graphQLClient","Profile","token","data","user","userTodos","setUserTodos","query","variables","id","fetcher","request","error","console","log","JSON","stringify","getServerSideProps","ctx","req","props"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA6B;AAC5C,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiBP,MAAM,CAAC,WAAD,CAA7B;AACA,QAAM;AAAA,OAACQ,SAAD;AAAA,OAAYC;AAAZ,MAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAMY,KAAK,GAAGX,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAZC;AAcA,QAAMY,SAAS,GAAG;AACjBC,IAAAA,EAAE,EAAEL,IAAI,IAAIA,IAAI,CAACK;AADA,GAAlB;;AAIA,QAAMC,OAAO,GAAG,MAAOH,KAAP,IAAiB,MAAMP,aAAa,CAACE,KAAD,CAAb,CAAqBS,OAArB,CAA6BJ,KAA7B,EAAoCC,SAApC,CAAvC;;AAEA,QAAM;AAAEL,IAAAA,IAAF;AAAQS,IAAAA;AAAR,MAAkBf,MAAM,CAAC,CAACU,KAAD,EAAQC,SAAR,CAAD,EAAqBE,OAArB,CAA9B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACAT,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,YAAY,CAACH,IAAD,CAAZ;AACA,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIA,MAAIS,KAAJ,EAAW,oBACV,QAAC,MAAD;AAAA,2BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADU;AAKX,sBACC,QAAC,MAAD;AAAA,cACGT,IAAI,gBACL;AAAA,gBACEY,IAAI,CAACC,SAAL,CAAeX,SAAf;AADF;AAAA;AAAA;AAAA;AAAA,YADK,gBAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CA7CD;;AA+CA,OAAO,eAAeY,kBAAf,CAAkCC,GAAlC,EAA4C;AAClD,QAAMhB,KAAK,GAAG,MAAMH,aAAa,CAACmB,GAAG,CAACC,GAAL,CAAjC;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAE;AAAElB,MAAAA,KAAK,EAAEA,KAAK,IAAI;AAAlB;AAAT,GAAP;AACA;AAED,eAAeD,OAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { gql } from 'graphql-request'\nimport useSWR from 'swr'\nimport Layout from '@/components/layout'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport { graphQLClient } from '@/utils/graphql-client'\n\nconst Profile = ({ token }: {token: any}) => {\n\tconst { data: user } = useSWR('/api/user')\n\tconst [userTodos, setUserTodos] = useState([])\n\tconst query = gql`\n\t\tquery FindCurrentUser($id: ID!) {\n\t\t\tfindUserByID(id: $id) {\n\t\t\t\temail\n\t\t\t\ttodos {\n\t\t\t\t\tdata {\n\t\t\t\t\t\ttask\n\t\t\t\t\t\tcompleted\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}    \n\t\t}\n\t`\n\n\tconst variables = {\n\t\tid: user && user.id\n\t}\n\n\tconst fetcher = async (query) => await graphQLClient(token).request(query, variables)\n\t\n\tconst { data, error } = useSWR([query, variables], fetcher)\n\tconsole.log(data)\n\tuseEffect(() => {\n\t\tsetUserTodos(data)\n\t}, [data])\n\n\tif (error) return (\n\t\t<Layout>\n\t\t\t<div>Error...</div>\n\t\t</Layout>\n\t)\n\treturn (\n\t\t<Layout>\n\t\t\t{ data ? (\n\t\t\t\t<div>\n\t\t\t\t\t{JSON.stringify(userTodos)}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t</Layout>\n\t)\n}\n\nexport async function getServerSideProps(ctx: any) {\n\tconst token = await getAuthCookie(ctx.req)\n\treturn { props: { token: token || null } }\n}\n\nexport default Profile"]},"metadata":{},"sourceType":"module"}