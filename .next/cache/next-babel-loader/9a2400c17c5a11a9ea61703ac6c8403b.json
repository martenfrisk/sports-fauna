{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/marten.frisk/nextfauna/pages/league/[id].tsx\";\n// import { useRouter } from 'next/router'\nimport { gql } from 'graphql-request';\nimport Layout from '@/components/layout';\nimport { graphQLClient } from '@/utils/graphql-client';\nimport { getAuthCookie } from '@/utils/auth-cookies';\nimport TeamPicker from 'pages/teampicker';\nimport { useState } from 'react';\n\nconst League = ({\n  data,\n  teams,\n  token\n}) => {\n  const {\n    0: pickedTeam,\n    1: setPickedTeam\n  } = useState(data.options.teams);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const {\n    0: updateMessage,\n    1: setUpdateMessage\n  } = useState('');\n\n  const updateTeam = async () => {\n    const query = gql`\n      mutation UpdateLeague($id: ID!, $name: String!, $teams: [String]) {\n        updateLeague(id: $id, data: { name: $name, options: { create: { teams: $teams } } }) {\n          name\n          options {\n\t\t\t\t\t\tteams\n\t\t\t\t\t}\n        }\n      }\n    `;\n    const variables = {\n      id: data._id,\n      name: data.name,\n      teams: pickedTeam\n    };\n\n    try {\n      await graphQLClient(token).request(query, variables);\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"League info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), data ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"League name: \", data.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"League members:\", data.members.data.length > 0 ? data.members.data.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [item.username, \" (\", item.email, \")\"]\n        }, item.username, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"ml-2 text-sm italics\",\n          children: \"No members :(\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"League options:\", data.options ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mr-4 text-sm\",\n            children: data.options.class\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.options.public ? 'Public' : 'Private'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this), JSON.stringify(data.options)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 8\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ml-2 text-sm italics\",\n          children: \"No options set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this), data.options.teams !== pickedTeam && updateMessage !== '' && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => updateTeam(),\n      children: \"Click to save changes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TeamPicker, {\n      teams: teams,\n      picker: [pickedTeam, setPickedTeam]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n};\n\nexport async function getServerSideProps(ctx) {\n  const {\n    id\n  } = ctx.params;\n  const token = getAuthCookie(ctx.req);\n  const {\n    teams\n  } = await fetch('https://www.thesportsdb.com/api/v1/json/1/lookup_all_teams.php?id=4328').then(res => res.json());\n  const query = gql`\n\t\tquery FindLeague($id: ID!) {\n\t\t\tfindLeagueByID(id: $id) {\n\t\t\t\tname\n\t\t\t\t_id\n\t\t\t\toptions {\n\t\t\t\t\tclass\n\t\t\t\t\tpublic\n\t\t\t\t\tteams\n\t\t\t\t\tdivisions\n\t\t\t\t}\n\t\t\t\tmembers {\n\t\t\t\t\tdata {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tusername\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n  const res = await graphQLClient(token).request(query, {\n    id\n  });\n  console.log(res);\n  const data = await res;\n  return {\n    props: {\n      token: token || null,\n      data: data === null || data === void 0 ? void 0 : data.findLeagueByID,\n      teams\n    }\n  };\n}\nexport default League;","map":{"version":3,"sources":["/Users/marten.frisk/nextfauna/pages/league/[id].tsx"],"names":["gql","Layout","graphQLClient","getAuthCookie","TeamPicker","useState","League","data","teams","token","pickedTeam","setPickedTeam","options","errorMessage","setErrorMessage","updateMessage","setUpdateMessage","updateTeam","query","variables","id","_id","name","request","error","console","message","members","length","map","item","username","email","class","public","JSON","stringify","getServerSideProps","ctx","params","req","fetch","then","res","json","log","props","findLeagueByID"],"mappings":"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","sourcesContent":["// import { useRouter } from 'next/router'\nimport { gql } from 'graphql-request'\nimport Layout from '@/components/layout'\nimport { graphQLClient } from '@/utils/graphql-client'\nimport { getAuthCookie } from '@/utils/auth-cookies'\nimport TeamPicker from 'pages/teampicker'\nimport { useState } from 'react'\n\nconst League = ({ data, teams, token }: { data: any, teams: any, token: any }) => {\n\tconst [pickedTeam, setPickedTeam] = useState(data.options.teams)\n\tconst [errorMessage, setErrorMessage] = useState('')\n\tconst [updateMessage, setUpdateMessage] = useState('')\n\tconst updateTeam = async () => {\n\t\tconst query = gql`\n      mutation UpdateLeague($id: ID!, $name: String!, $teams: [String]) {\n        updateLeague(id: $id, data: { name: $name, options: { create: { teams: $teams } } }) {\n          name\n          options {\n\t\t\t\t\t\tteams\n\t\t\t\t\t}\n        }\n      }\n    `\n\n\t\tconst variables = {\n\t\t\tid: data._id,\n\t\t\tname: data.name,\n\t\t\tteams: pickedTeam,\n\t\t}\n\n\t\ttry {\n\t\t\tawait graphQLClient(token).request(query, variables)\n\t\t} catch (error) {\n\t\t\tconsole.error(error)\n\t\t\tsetErrorMessage(error.message)\n\t\t}\n\t}\n\n\treturn (\n\t\t<Layout>\n\t\t\t<h1>League info</h1>\n\n\t\t\t{data ? (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>\n\t\t\t\t\t\tLeague name: {data.name}\n\t\t\t\t\t</h2>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tLeague members: \n\t\t\t\t\t\t{data.members.data.length > 0 ? (\n\t\t\t\t\t\t\tdata.members.data.map((item) => (\n\t\t\t\t\t\t\t\t<div key={item.username}>\n\t\t\t\t\t\t\t\t\t{item.username} ({item.email})\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span className=\"ml-2 text-sm italics\">\n\t\t\t\t\t\t\t\tNo members :(\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tLeague options:\n\t\t\t\t\t\t{data.options ? (\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<span className=\"mr-4 text-sm\">\n\t\t\t\t\t\t\t\t\t{data.options.class}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"text-sm\">\n\t\t\t\t\t\t\t\t\t{data.options.public ? 'Public' : 'Private'}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t{JSON.stringify(data.options)}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<div className=\"ml-2 text-sm italics\">\n\t\t\t\t\t\t\t\tNo options set\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t): (\n\t\t\t\t<div>Loading...</div>\n\t\t\t)}\n\t\t\t{data.options.teams !== pickedTeam && updateMessage !== '' && (\n\t\t\t\t<button onClick={() => updateTeam()}>Click to save changes</button>\n\t\t\t)}\n\t\t\t{errorMessage && (\n\t\t\t\t<p>{errorMessage}</p>\n\t\t\t)}\n\t\t\t<TeamPicker teams={teams} picker={[pickedTeam, setPickedTeam]} />\n\t\t</Layout>\n\t)\n}\n\n\nexport async function getServerSideProps(ctx: any) {\n\tconst { id } = ctx.params\n\tconst token = getAuthCookie(ctx.req)\n\n\tconst { teams } = await fetch('https://www.thesportsdb.com/api/v1/json/1/lookup_all_teams.php?id=4328').then((res) => res.json())\n\n\tconst query = gql`\n\t\tquery FindLeague($id: ID!) {\n\t\t\tfindLeagueByID(id: $id) {\n\t\t\t\tname\n\t\t\t\t_id\n\t\t\t\toptions {\n\t\t\t\t\tclass\n\t\t\t\t\tpublic\n\t\t\t\t\tteams\n\t\t\t\t\tdivisions\n\t\t\t\t}\n\t\t\t\tmembers {\n\t\t\t\t\tdata {\n\t\t\t\t\t\t_id\n\t\t\t\t\t\tusername\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}`\n\tconst res = await graphQLClient(token).request(query, {id})\n\tconsole.log(res)\n\tconst data = await res\n\n\treturn { props: { \n\t\ttoken: token || null,\n\t\tdata: data?.findLeagueByID,\n\t\tteams\n\t} }\n}\n\nexport default League"]},"metadata":{},"sourceType":"module"}